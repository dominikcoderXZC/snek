"""

████████╗██╗  ██  █████╗ ███╗  ██╗██╗  ██╗  ██╗   ██╗ █████╗ ██╗   ██╗
╚══██╔══╝██║  ██║██╔══██╗████╗ ██║██║ ██╔╝  ╚██╗ ██╔╝██╔══██╗██║   ██║
   ██║   ███████║███████║██╔██╗██║█████═╝    ╚████╔╝ ██║  ██║██║   ██║
   ██║   ██╔══██║██╔══██║██║╚████║██╔═██╗     ╚██╔╝  ██║  ██║██║   ██║
   ██║   ██║  ██║██║  ██║██║ ╚███║██║ ╚██╗     ██║   ╚█████╔╝╚██████╔╝
   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚══╝╚═╝  ╚═╝     ╚═╝    ╚════╝  ╚═════╝ 

    for downloading snek! to download this:
        1) copy all of the text from this file
        2) open up python idle
        3) press file, then new file
        4) paste all of the code in there
        5) press run, and then press ok
        6) save in your desired location
        (recommended to save in an empty folder)

        you can save the python name as anything you want
        (use a name that will be easy to remember)

        and voila! You have successfully installed snake! to run the game again, go to
        the folder you have saved snek in, and then double tap the .py file


    psst! use code MEGAUPDATE for a free skin!

"""









































import os, io, time, random, sys
from tkinter import messagebox

try:
    # For Python 3.0 and later
    from urllib.request import urlopen
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen

python = sys.executable

if os.path.basename(__file__).endswith(".pyw"):
    os.rename(__file__,"snek.py")


response = urlopen("https://raw.githubusercontent.com/dominikcoderXZC/snek/main/Snek_v1.2_BETA_(play_early)")
data = response.read().decode('utf-8')
if open(__file__,"r",encoding="utf-8").read() != data:
    messagebox.showinfo(title="update",message="a new update is available, press ok to update")
    open(__file__,"w",encoding='utf-8').write(data)
    os.execl(python, python, *sys.argv)


def show_exception_and_exit(exc_type, exc_value, tb):
    import traceback
    traceback.print_exception(exc_type, exc_value, tb)
    input("Press key to exit.")
    sys.exit(-1)

import sys
sys.excepthook = show_exception_and_exit

os.system("cd ")

if not os.path.exists(os.path.dirname(os.path.realpath(__file__))+"\.data"):
    open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w").write("""#{'mode':'1','eq': 0, 'items': [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
#0
#0
#None
#[1, 3, 5, 7]
#2
#False
#False
"""
)

def lightdark():
    with open(__file__, 'r') as file:
        filedata = file.read()

    # Replace the target string
    filedata = filedata.replace('ram', 'abcd')

    # Write the file out again
    with open('file.txt', 'w') as file:
        file.write(filedata)

ea = str(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[3])
ea = ea[1:len(ea)-1]

if str(time.strftime("%A")) != ea:
    temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
    temp2[3] = time.strftime("#%A") + "\n"
    t = []
    for i in range(4):
        passed = True
        while passed:
            r = random.randint(1,12)
            if not r in t:
                t.append(r)
                passed = False
    temp2[4] = "#" + str(t) + "\n"
    open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w").write(''.join(temp2))
    


highscore = int(eval(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[2][1:]))

data1 = eval(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[0][1:])

if len(data1["items"]) != 19:
    print(type(data1["items"]))
    data1["items"].append(0)
    data1["items"].append(0)
    temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
    temp2[0] = "#" + str(data1) + "\n"
    temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
    for i in temp2:
        temp.write(i)
        temp.flush()
    temp.close()

ish = eval(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[4][1:])

money = eval(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[1][1:])
 
 
from tkinter import *
from tkinter import messagebox, ttk, simpledialog
import sys, os, random, threading, time
import urllib.request, json, webbrowser
 
import json
try:
    # For Python 3.0 and later
    from urllib.request import urlopen
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen

try:
    response = urlopen("https://raw.githubusercontent.com/dominikcoderXZC/snek/main/snek.json")
    data = response.read().decode("utf-8")
    news = json.loads(data)
    news = news["news"]
    
    response2 = urlopen("https://raw.githubusercontent.com/dominikcoderXZC/snek/main/tos.json")
    data2 = response2.read().decode("utf-8")
    toss = json.loads(data2)
    toss = toss["tos"]

    splash = urlopen("https://raw.githubusercontent.com/dominikcoderXZC/snek/main/splash.txt")
    data2 = splash.read().decode("utf-8")
    splash = data2.splitlines()

except:
    news = "no internet"
    toss = "no internet"
    splash = ["offline mode :("]

def writehs():
    if not diff == "1":
        data1["items"][0] = 1
        temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
        temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
        temp2[2] = "#" + str(totalscore[0]) + "\n"
        if totalscore[0] > 80 and not data1["items"][14] == 1 and not data1["items"][15] == 1:
            data1["items"][14] = 1
            data1["items"][15] = 1
            temp2[0] = "#" + str(data1) + "\n"
            messagebox.showwarning(title="SUPERHIGHSCOREDETECTED",message="WE HAVE DETECTED THAT YOUR SCORE IS OVER 80!\n\nPROTOCAL.ADDSKIN IS EXECUTING")
        elif totalscore[0] > 80 and not data1["items"][15] == 1:
            data1["items"][15] = 1
            temp2[0] = "#" + str(data1) + "\n"
            messagebox.showwarning(title="SUPERHIGHSCOREDETECTED",message="WE HAVE DETECTED THAT YOUR SCORE IS OVER 80!\n\nPROTOCAL.ADDSKIN IS EXECUTING")
        elif totalscore[0] > 50 and not data1["items"][14] == 1:
            data1["items"][14] = 1
            temp2[0] = "#" + str(data1) + "\n"
            messagebox.showwarning(title="SUPERHIGHSCOREDETECTED",message="WE HAVE DETECTED THAT YOUR SCORE IS OVER 50!\n\nPROTOCAL.ADDSKIN IS EXECUTING")
        for i in temp2:
            temp.write(i)
            temp.flush()

def coinee():
    data1["items"][0] = 1
    temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
    temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
    temp2[1] = "#" + str(int(money) + int(totalcoins)) + "\n"
    for i in temp2:
        
        temp.write(i)
        temp.flush()

def get_pos(event):
    global xwin
    global ywin
 
    xwin = event.x
    ywin = event.y
 
def move_window(event):
    root.geometry('+{}+{}'.format(event.x_root - xwin,event.y_root - ywin))
 
def change_on_hovering(event):
    close_button['bg'] = 'red'
 
def return_to_normal_state(event):
    close_button['bg'] = back_ground
 
back_ground = "#171717"
content_color = "#ffffff"
 
 
root = Tk()

root.wm_attributes("-topmost",True)
 
root.config(bg="#171717")
 
root.overrideredirect(True)

def flash():
    fle = Toplevel()
    fle.config(bg="red")
    fle.attributes("-alpha",0.5)

    fle.overrideredirect(True)
    fle.geometry("5000x5000+0+0")

    window.after(200,lambda: fle.destroy())

county = 0

blind = False

def blindness():
    global county, blind
    fle = Toplevel()
    fle.config(bg="black")
    fle.attributes("-alpha",0.005)

    fle.overrideredirect(True)
    fle.geometry("5000x5000+0+0")

    county = 0

    def increase():
        global blind
        def decrease():
            global blind
            blind = False
            global county
            county -= 0.005
            fle.attributes("-alpha",county)

            if not county <= 0:
                window.after(10,decrease)
            else:
                window.after(200,lambda: fle.destroy())
        global county
        county += 0.005
        fle.attributes("-alpha",county)

        if not county >= 1:
            window.after(10,increase)
        else:
            blind = True
            window.after(10000,decrease)

    

    window.after(100,increase)



root.bind("<space>",lambda i: blindness())

root2 = Frame(bg="#171717",highlightthickness=3,highlightbackground="white")
root2.pack(fill=BOTH,expand=True)

window = Frame(root2, bg='#1D1D1D')

bg = Canvas(window,highlightthickness=0,bg="#1D1D1D",width=1000,height=800)
bg.place(x=0,y=0)

def snow():
    global bg
    ye = bg.create_line(0,-2,1000,2,fill="#171717",width=5)
    e = 0
    def movesnow(ea):
        bg.move(ye,0,1)
        ea += 1
        if not ea > 900:
            window.after(5,movesnow,ea+1)
        else:
            bg.delete(ye)
    window.after(1,movesnow,e)
def spawnsn():
    window.after(1,snow)
    window.after(500,spawnsn)

window.after(1,spawnsn)

 
def closeit():
    root.destroy()
    os._exit(0)
 
title_bar = Frame(root2, bg=back_ground, relief='raised', bd=0,
                     highlightcolor=back_ground,
                     highlightthickness=0)
 
close_button = Button(title_bar, text='x', bg=back_ground, padx=5, pady=2,
                         bd=0, font="bold", fg='white',
                         activebackground="red",
                         activeforeground="white",
                         highlightthickness=0,
                         command=closeit)
 
title_window = "Snek v1.2"
title_name = Label(title_bar, text=title_window, bg=back_ground, fg="white")
 
title_bar.pack(fill='x', side=TOP)
title_name.pack(side='left')
close_button.pack(side='right')
window.pack(fill='both',expand=True)
 
title_bar.bind("<B1-Motion>", move_window)
title_bar.bind("<Button-1>", get_pos)
close_button.bind('<Enter>', change_on_hovering)
close_button.bind('<Leave>', return_to_normal_state)
 
version = "1.2.0"
 
def quote():
    quotes = ["Snek v1.2"]
    title_name.config(text=random.choice(quotes))
 
root.attributes('-topmost', 1)
 
 
 
def state():
    if root.state() == "normal":
        root.overrideredirect(True)
    try:
        root.after(10,state)
    except:
        sys.exit()
 
root.overrideredirect(True)
root.geometry('805x505+200+200')
 
state()

python = sys.executable
 
invin = False
 
cla = ["red","yellow","green"]
 
snaker = PhotoImage("./snake.png")
 
gridsize = 10
speed = 1.5
 
def close():
    if messagebox.askokcancel(title="cancel",message="are you sure you want to exit?") == True:
        window.destroy()
        try:
            passed.set("hello")
        except:
            pass
        sys.exit()
 
def news2():
    nwe = Toplevel()
    def top():
        nwe.attributes("-topmost",True)
        nwe.geometry("300x300+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-150),str(int(root.winfo_y()+root.winfo_height()/2)-150)))
        nwe.after(10,top)
    nwe.overrideredirect(True)
    nwe.config(bg="#252525")
    Label(nwe,text=news,fg="green",bg="#252525",font=("Lucida Console","10")).pack()
    Button(nwe,text="close",fg="green",bg="#252525",font=("Lucida Console","20"),command=nwe.destroy).pack(side=BOTTOM)
    nwe.after(10,top)

ev = False

def event():
    global ev
    nwe = Toplevel()
    def top():
        nwe.attributes("-topmost",True)
        nwe.geometry("300x300+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-150),str(int(root.winfo_y()+root.winfo_height()/2)-150)))
        nwe.after(10,top)
    nwe.overrideredirect(True)
    nwe.config(bg="#252525")
    Label(nwe,text="EVENT:",fg="green",bg="#252525",font=("Lucida Console","30","bold")).pack()

    e = Frame(nwe,bg='#252525')
    e.pack(side=TOP,pady=20)
    e2 = Canvas(e,bg='black',width=100,height=100)
    e2.pack(side=TOP)

    def ea():
        global ev
        passed.set("hello")
        pass2.set("yes2")
        nwe.destroy()
        ev = True

    pl = Button(e,text="play",command=lambda: ea())
    pl.pack()

    Button(nwe,text="close",fg="green",bg="#252525",font=("Lucida Console","20"),command=nwe.destroy).pack(side=BOTTOM)
    nwe.after(10,top)
 
root.config(cursor="dot")
 
diff = "2"
 
def tos():
    global toss, settings2
    nwe = Toplevel()
    def top():
        nwe.attributes("-topmost",True)
        nwe.geometry("500x400+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-250),str(int(root.winfo_y()+root.winfo_height()/2)-200)))
        nwe.after(10,top)
    nwe.overrideredirect(True)
    nwe.config(bg="#252525")
    Label(nwe,text=toss,fg="green",bg="#252525",font=("Lucida Console","10")).pack()
    Button(nwe,text="close",fg="green",bg="#252525",font=("Lucida Console","20"),command=lambda: [nwe.destroy(),settings2()]).pack(side=BOTTOM)
    nwe.after(10,top)

def item():
    global toss, settings2
    nwe = Toplevel()
    def top():
        nwe.attributes("-topmost",True)
        nwe.geometry("500x400+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-250),str(int(root.winfo_y()+root.winfo_height()/2)-200)))
        nwe.after(10,top)
    nwe.overrideredirect(True)
    nwe.config(bg="#252525")
    Label(nwe,text="""
█ ▀█▀ █▀▀ █▀▄▀█ █▀
█  █   ██▄ █ ▀ █ ▄█""",fg="green",bg="#252525",font=("Lucida Console","10")).pack()
    Button(nwe,text="close",fg="green",bg="#252525",font=("Lucida Console","20"),command=lambda: nwe.destroy()).pack(side=BOTTOM)
    def checkish1(num):
        items66 = {
            1: "lightgreen",
            2: "lightblue",
            3: "pink",
            4: "orange",
            5: "green",
            6: "gray",
            7: "white",
            8: "orange",
            9: ["green", "white"],
            10: ["black", "red"],
            11: ["blue", "yellow"],
            12: ["black","orange"]
        }
        if num == 0:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='green')"""]
        if num >= 1 and num < 5:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='{}')""".format(items66[num])]
        elif num >= 5 and num < 9:
            return ["""re2[i-1].create_oval(13,13,40,40,fill='{}')""".format(items66[num])]
        elif num >= 9 and num < 12:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='{}',outline='{}',width=2)""".format(items66[num][0],items66[num][1])]
        elif num == 12:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='black',outline='orange', width=2)""","""re2[i-1].create_oval(15,15,37,37,tags='square',fill='orange')"""]
        elif num == 13:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='lightblue',outline='blue', width=2)""","""re2[i-1].create_rectangle(19,19,34,34,tags='square',fill='lightblue',outline='blue',width=2)"""]
        elif num == 14:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='black',outline='green', width=2)""","""re2[i-1].create_oval(12,12,40,40,tags='square',fill='black',outline='green',width=2)"""]
        elif num == 15:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='black',outline='blue', width=2)""","""re2[i-1].create_text(26,25,font=("Arial","15"),text="50",tags='square',fill='blue')"""]
        elif num == 16:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='black',outline='purple', width=2)""","""re2[i-1].create_text(26,25,font=("Arial","15"),text="80",tags='square',fill='purple')"""]
        elif num == 17:
            return ["""print("THE DUNGEON SKIN HAS BEEN PERMENANTLY REMOVED FROM THE GAME")"""]
        elif num == 18:
            return ["""re2[i-1].create_rectangle(11,11,42,42,tags='square',fill='red',outline="white",width=2)""","""re2[i-1].create_line(40,13,13,40,tags='square',fill='white',width=3)"""]
        elif num == 19:
            return ["""re2[i-1].create_rectangle(11,11,42,42,tags='square',fill='white')""","""re2[i-1].create_line(40,13,13,40,tags='square',fill='red',width=3)""","""re2[i-1].create_rectangle(11,11,42,42,tags='square',fill='red',outline="white",width=2)""","""re2[i-1].create_line(20,13,13,20,tags='square',fill='green',width=3)""","""re2[i-1].create_line(20,13,13,20,tags='square',fill='green',width=3)"""]
    def equ(num):
        global money, temp, temp2
        data1["eq"] = num
        temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
        temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
        temp2[0] = "#" + str(data1) + "\n"
        temp2[1] = "#" + str(money) + "\n"
        for i in temp2:
            temp.write(i)
            temp.flush()
        nwe.destroy()
        item()
    from tkinter import ttk
    f = Canvas(nwe, bg="#252525", bd=0, highlightthickness=0, relief='ridge')
    f22 = Frame(f, bg="#252525")
    f2 = []
    f2.append(Frame(f22, bg="#252525"))
    f2[len(f2)-1].pack(pady=20)
    re = []
    re2 = []
    sb=ttk.Scrollbar(f,orient="vertical",command=f.yview)
    f22.bind(
        "<Configure>",
        lambda e: f.configure(
            scrollregion=f.bbox("all")
        )
    )
    f.create_window((0,0),window=f22,anchor="nw")
    f.configure(yscrollcommand=sb.set)
    f.pack(side=LEFT,fill="both", expand=True)
    sb.pack(side=RIGHT,fill="y")

    re.append(None)
    re2.append(None)
    if len(f2[len(f2)-1].winfo_children()) == 4:
        f2.append(Frame(f22, bg="#252525"))
        f2[len(f2)-1].pack(pady=10)
    ie = Frame(f2[len(f2)-1], bg='#252525')
    ie.pack(side=LEFT,padx=20)
    ie2 = Canvas(ie,bg='black',width=50,height=50)
    ie2.pack(side=TOP)
    
    ie2.create_rectangle(13,13,40,40,fill="green")
    if not data1["eq"] == 0:
        Button(ie,text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(0)).pack(pady=5)
    else:
        Label(ie,text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)

    for i in range(len(data1["items"])):
        i += 1
        re.append(None)
        re2.append(None)
        if len(f2[len(f2)-1].winfo_children()) == 4:
            f2.append(Frame(f22, bg="#252525"))
            f2[len(f2)-1].pack(pady=10)
        if data1["items"][i-1] == 1 and not i == 17:
            re[i-1] = Frame(f2[len(f2)-1], bg='#252525')
            re[i-1].pack(side=LEFT,padx=20)
            re2[i-1] = Canvas(re[i-1],bg='black',width=50,height=50)
            re2[i-1].pack(side=TOP)
            if len(checkish1(i)) == 2:
                eval(checkish1(i)[0])
                eval(checkish1(i)[1])
            elif len(checkish1(i)) == 3:
                eval(checkish1(i)[0])
                eval(checkish1(i)[1])
                eval(checkish1(i)[2])
            elif len(checkish1(i)) == 4:
                eval(checkish1(i)[0])
                eval(checkish1(i)[1])
                eval(checkish1(i)[2])
                eval(checkish1(i)[4])
            else:
                eval(checkish1(i)[0])
            if not data1["eq"] == i:
                if i == 1:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(1)).pack(pady=5)
                elif i == 2:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(2)).pack(pady=5)
                elif i == 3:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(3)).pack(pady=5)
                elif i == 4:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(4)).pack(pady=5)
                elif i == 5:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(5)).pack(pady=5)
                elif i == 6:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(6)).pack(pady=5)
                elif i == 7:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(7)).pack(pady=5)
                elif i == 8:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(8)).pack(pady=5)
                elif i == 9:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(9)).pack(pady=5)
                elif i == 10:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(10)).pack(pady=5)
                elif i == 11:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(11)).pack(pady=5)
                elif i == 12:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(12)).pack(pady=5)
                elif i == 13:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(13)).pack(pady=5)
                elif i == 14:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(14)).pack(pady=5)
                elif i == 15:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(15)).pack(pady=5)
                elif i == 16:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(16)).pack(pady=5)
                elif i == 17:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(17)).pack(pady=5)
                elif i == 18:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(18)).pack(pady=5)
                elif i == 19:
                    Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(19)).pack(pady=5)
            else:
                if i == 1:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 2:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 3:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 4:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 5:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 6:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 7:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 8:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 9:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 10:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 11:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 12:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 13:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 14:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 15:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 16:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 17:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 18:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)
                elif i == 19:
                    Label(re[i-1],text="equipped",bg='#252525',fg='#00FF80',font=('Lucida Console','15')).pack(pady=5)

            
    nwe.after(10,top)

la = BooleanVar()
la.set(True)

la2 = BooleanVar()
la2.set(True)

mode1 = data1["mode"]

def settings2():
    global diff, tos, la, la2, mode1, modela
    def save():
        data1["mode"] = mode1
        temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
        temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
        temp2[0] = "#" + str(data1) + "\n"
        for i in temp2:
            temp.write(i)
            temp.flush()
    nwe2 = Toplevel()
    nwe2.overrideredirect(True)
    nwe2.config(bg="#252525")
    f22 = Frame(nwe2,bg="#252525")
    f22.pack(side=TOP,pady=7)
    f33 = Frame(nwe2,bg="#252525")
    f33.pack(side=TOP,pady=7)
    f = Frame(nwe2,bg="#252525",cursor="dot")
    f.place(rely=0.8,relx=0.24)
    Label(f22,text="laser assist",fg="green",bg="#252525",font=("Lucida Console","10")).pack(side=LEFT)
    e2221 = Checkbutton(f22,variable=la,bg="#252525",fg="green",cursor="dot")
    e2221.pack()
    Label(f33,text="eyes enabled",fg="green",bg="#252525",font=("Lucida Console","10")).pack(side=LEFT)
    e22212 = Checkbutton(f33,variable=la2,bg="#252525",fg="green",cursor="dot")
    e22212.pack()
    Button(f,text="close",fg="green",bg="#252525",font=("Lucida Console","20"),command=lambda: [save(),nwe2.destroy()]).pack(side=LEFT,padx=25)
    f11 = Label(nwe2,text="difficulty: easy",fg="green",bg="#252525",font=("Lucida Console","10"))
    f11.pack()
    s = Scale(nwe2,from_=1,to=5,bg="#252525",bd=0,orient=HORIZONTAL,showvalue=0)
    s.set(diff)
    s.pack()
    if data1["eq"] == 17:
        f63 = Label(nwe2,text="dungeon skin mode: white",fg="green",bg="#252525",font=("Lucida Console","10"))
        f63.pack()
        s2 = Scale(nwe2,from_=1,to=4,bg="#252525",bd=0,orient=HORIZONTAL,showvalue=0)
        s2.set(int(data1["mode"]))
        s2.pack()
    Button(f,text="tos",fg="green",bg="#252525",font=("Lucida Console","10"),command=lambda: [tos(),nwe2.destroy()]).pack(side=RIGHT)
 
    def top():
        global diff, mode1
        nwe2.attributes("-topmost",True)
        nwe2.geometry("300x300+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-150),str(int(root.winfo_y()+root.winfo_height()/2)-150)))
        nwe2.after(10,top)
        numbers = {
            "1":"easy",
            "2":"medium",
            "3":"hard",
            "4":"demon",
            "5":"oh god why",
        }
        diff = str(s.get())
        f11.config(text="difficulty: "+numbers[str(s.get())])
        if data1["eq"] == 17:
            numbers2 = {
                "1":"normal",
                "2":"reactive",
                "3":"rainbow",
                "4":"single rainbow"
            }
            mode1 = str(s2.get())
            f63.config(text="dungeon skin mode: "+numbers2[str(s2.get())])
    nwe2.after(10,top)

stop = False

def shop():
    global data1, money, redeem, stop
    temp = None
    temp2 = None
    import time
    def open2():
        nwe.destroy()
        for i in range(25):
            time.sleep(0.05)
            root.attributes("-alpha",i*5/100)
    for i in range(25, 0, -1):
        time.sleep(0.05)
        root.attributes("-alpha",i*5/100)
    nwe = Toplevel()
 
    vars1 = [StringVar(),StringVar(),StringVar(),StringVar()]
    vars2 = [IntVar(),IntVar(),IntVar(),IntVar()]

    def redeem():
        nwe.withdraw()
        root.withdraw()
        if simpledialog.askstring("Redeem Code", "redeem a code here") == "MEGAUPDATE":
            messagebox.showinfo(title="success!",message="code redeemed")
            data1["items"][13] = 1
            temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
            temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
            temp2[0] = "#" + str(data1) + "\n"
            temp2[1] = "#" + str(money) + "\n"
            for i in temp2:
                temp.write(i)
                temp.flush()
        else:
            messagebox.showinfo(title="Error!",message="not a valid code")
        nwe.deiconify()
        root.deiconify()

    nwe.overrideredirect(True)
    nwe.config(bg="#1D1D1D")

    bg2 = Canvas(nwe,highlightthickness=0,bg="#1D1D1D",width=1000,height=800)
    bg2.place(x=0,y=0)

    Label(nwe,text="""
██████╗░██╗░░░░░░█████╗░░█████╗░██╗░░██╗  ███╗░░░███╗░█████╗░██████╗░██╗░░██╗███████╗████████╗
██╔══██╗██║░░░░░██╔══██╗██╔══██╗██║░██╔╝  ████╗░████║██╔══██╗██╔══██╗██║░██╔╝██╔════╝╚══██╔══╝
██████╦╝██║░░░░░███████║██║░░╚═╝█████═╝░  ██╔████╔██║███████║██████╔╝█████═╝░█████╗░░░░░██║░░░
██╔══██╗██║░░░░░██╔══██║██║░░██╗██╔═██╗░  ██║╚██╔╝██║██╔══██║██╔══██╗██╔═██╗░██╔══╝░░░░░██║░░░
██████╦╝███████╗██║░░██║╚█████╔╝██║░╚██╗  ██║░╚═╝░██║██║░░██║██║░░██║██║░╚██╗███████╗░░░██║░░░
╚═════╝░╚══════╝╚═╝░░╚═╝░╚════╝░╚═╝░░╚═╝  ╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝░░░╚═╝░░░""",fg="green",bg="#1D1D1D",font=("Lucida Console","10")).pack(pady=10)
    Label(nwe,text="Daily Item Shop (money: {})".format(str(money)),bg="#1D1D1D",fg="yellow",font=("Lucida Console","15")).pack()
    f = Frame(nwe, bg="#1D1D1D")
    f.pack(pady=10)
    Label(nwe,text="Apple Upgrades".format(str(money)),bg="#1D1D1D",fg="yellow",font=("Lucida Console","15")).pack(pady=10)
 
    def top():
        nwe.attributes("-topmost",True)
        nwe.geometry("800x500+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-400),str(int(root.winfo_y()+root.winfo_height()/2)-250)))
        nwe.after(10,top)
    cost = [200,200,200,200,800,800,800,800,1200,1200,1200,2000]
    def buy(num):
        
        global money, temp, temp2 
        if money >= cost[num-1]:
            money -= cost[num-1]
            data1["items"][num-1] = 1
            temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
            temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
            temp2[0] = "#" + str(data1) + "\n"
            temp2[1] = "#" + str(money) + "\n"
            for i in temp2:
                temp.write(i)
                temp.flush()
            nwe.destroy()
            shop()
        else:
            nwe.withdraw()
            root.withdraw()
            messagebox.showinfo(title="error!",message="not enough money!")
            nwe.deiconify()
            root.deiconify()
    def equ(num):
        global money, temp, temp2
        
        data1["eq"] = num
        temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
        temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
        temp2[0] = "#" + str(data1) + "\n"
        temp2[1] = "#" + str(money) + "\n"
        for i in temp2:
            temp.write(i)
            temp.flush()
        nwe.destroy()
        shop()
   
    def checkish1(num):
        items66 = {
            1: "lightgreen",
            2: "lightblue",
            3: "pink",
            4: "orange",
            5: "green",
            6: "gray",
            7: "white",
            8: "orange",
            9: ["green", "white"],
            10: ["black", "red"],
            11: ["blue", "yellow"],
            12: ["black","orange"]
        }
        if num >= 1 and num < 5:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='{}')""".format(items66[num])]
        elif num >= 5 and num < 9:
            return ["""re2[i-1].create_oval(13,13,40,40,fill='{}')""".format(items66[num])]
        elif num >= 9 and num < 12:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='{}',outline='{}',width=2)""".format(items66[num][0],items66[num][1])]
        elif num == 12:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='black',outline='orange', width=2)""","""re2[i-1].create_oval(15,15,37,37,tags='square',fill='orange')"""]
    re = []
    re2 = []

    for i in range(len(ish)):
        i += 1
        x = ish[i-1]
        re.append(None)
        re2.append(None)
        count = 0
        re[i-1] = Frame(f, bg='#1D1D1D')
        re[i-1].pack(side=LEFT,padx=20)
        re2[i-1] = Canvas(re[i-1],bg='black',width=50,height=50)
        re2[i-1].pack(side=TOP)
        if len(checkish1(ish[i-1])) == 2:
            eval(checkish1(ish[i-1])[0])
            eval(checkish1(ish[i-1])[1])
        else:
            eval(checkish1(ish[i-1])[0])
        
        if data1["items"][ish[i-1]-1] == 0:
            vars1[i-1].set("buy")
            vars2[i-1].set(cost[ish[i-1]-1])
            if i == 1:
                Button(re[i-1], textvariable=vars1[i-1],bg="#252525",fg="green",font=("Terminal","15"),command=lambda: [buy(ish[0])]).pack(side=BOTTOM)
            elif i == 2:
                Button(re[i-1], textvariable=vars1[i-1],bg="#252525",fg="green",font=("Terminal","15"),command=lambda: [buy(ish[1])]).pack(side=BOTTOM)
            elif i == 3:
                Button(re[i-1], textvariable=vars1[i-1],bg="#252525",fg="green",font=("Terminal","15"),command=lambda: [buy(ish[2])]).pack(side=BOTTOM)
            elif i == 4:
                Button(re[i-1], textvariable=vars1[i-1],bg="#252525",fg="green",font=("Terminal","15"),command=lambda: [buy(ish[3])]).pack(side=BOTTOM)
            Label(re[i-1],textvariable=vars2[i-1],fg="yellow",bg="#1D1D1D",font=("Lucida Console","10")).pack()
        else:
            vars1[i-1].set("equip")
            vars2[i-1].set(cost[ish[i-1]-1])
            Label(re[i-1],textvariable=vars2[i-1],fg='#1D1D1D',bg='#1D1D1D',font=('Terminal','10')).pack()
            if i == 1:
                Label(re[i-1], text="owned",bg='#252525',fg='green',font=('Terminal','15')).pack(side=BOTTOM)
            if i == 2:
                Label(re[i-1], text="owned",bg='#252525',fg='green',font=('Terminal','15')).pack(side=BOTTOM)
            if i == 3:
                Label(re[i-1], text="owned",bg='#252525',fg='green',font=('Terminal','15')).pack(side=BOTTOM)
            if i == 4:
                Label(re[i-1], text="owned",bg='#252525',fg='green',font=('Terminal','15')).pack(side=BOTTOM)
    f33 = Frame(nwe,bg="#1D1D1D")
    f33.pack()

    def appla():
        global money, temp, temp2 
        apples = int(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[5][1:])
        if money >= 500 and not apples == 15:
            money -= 500
            temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
            temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
            temp2[5] = "#" + str(apples+1) + "\n"
            temp2[2] = "#" + str(money) + "\n"
            for i in temp2:
                temp.write(i)
                temp.flush()
            nwe.destroy()
            shop()
        else:
            nwe.withdraw()
            root.withdraw()
            messagebox.showinfo(title="error!",message="not enough money or\nmax apple limit reached")
            nwe.deiconify()
            root.deiconify()    

    def kapp():
        global money, temp, temp2
        if money >= 3000:
            money -= 3000
            temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
            temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
            temp2[6] = "#" + "True" + "\n"
            temp2[1] = "#" + str(money) + "\n"
            for i in temp2:
                temp.write(i)
                temp.flush()
            nwe.destroy()
            shop()
        else:
            nwe.withdraw()
            root.withdraw()
            messagebox.showinfo(title="error!",message="not enough money!")
            nwe.deiconify()
            root.deiconify()

    ga = Frame(f33,bg="#1D1D1D")
    ga.pack(side=LEFT,padx=50)

    ga1 = Canvas(ga,bg='black',width=50,height=50)

    ga1.create_oval(13,13,40,40,fill='red',outline='darkred', width=2)

    ga1.pack(side=TOP)
    ga2 = Label(ga,text="500\n({}/15)".format(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[5][1:].replace("\n","")),fg="yellow",bg="#1D1D1D",font=("Lucida Console","10"))
    ga2.pack()
    ga3 = Button(ga,text="buy",bg="#252525",fg="green",font=("Terminal","15"),command = lambda: appla())
    ga3.pack()

    f44 = Frame(nwe,bg="#1D1D1D")
    f44.pack(side=BOTTOM)
    Button(f44,text="close",fg="green",bg="#252525",font=("Terminal","25"),command=lambda: [open2()]).pack(side=LEFT,padx=30)
    Button(f44,text="redeem code",fg="green",bg="#252525",font=("Terminal","25"),command=lambda: redeem()).pack(side=RIGHT,padx=30)
    nwe.after(10,top)
 
score = StringVar()
score.set("Snek")
die = 0
die2 = 0

inc = False
 
totalscore = [1, 1]
 
pass2 = StringVar()
 
ton = False
 
players = 1
 
newslbl = None
slbl2 = None

button1a = None

votecolor = "yellow"

cstext = """a new way to install games...

WeeklyGameLauncher will be a launcher, designed
to give you hundreds of free games, with new games
coming out every week. the launcher will come out
in january, with 10+ games ready to install (more
coming every week). """

def loopvote():
    global button1a,votecolor
    try:
        button1a.config(fg=votecolor)
        if votecolor == "blue":
            votecolor = "green"
        else:
            votecolor = "green"
        window.after(300,loopvote)
    except Exception as e:
        pass

stt = None

txt = random.choice(splash)
index = 0
c = ""

if txt == "lines":
    txt = "{} lines of code!".format(len(open(__file__,"r",encoding='utf-8').readlines()))

def typesplash():
    global stt, c, txt, index
    index += 1
    c = c + txt[index-1]
    try:
        stt.config(text=c)
    except:
        pass
    if not c == txt:
        window.after(50,typesplash)


def start():
    global passed, snake, gridsize, cstext, speed, cla, score, inc, invin, pass2, players, ton, newslbl, slbl2, button1a, splash, stt, ts
    
    mbdi = PhotoImage(data="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")
    
    if eval(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[6][1:]):

        newslbl = Label(root2,image=mbdi,bd=0)
        newslbl.pack(side=LEFT,padx=20)

        slbl2 = Button(root2,text="⚙",font=("Lucida Console","20"),fg="green",bg="#171717",relief=FLAT,bd=0,command=settings2,highlightthickness=3)
        slbl2.pack(side=RIGHT)

    else:
        newslbl = Label(root2,image=mbdi,bd=0)
        newslbl.pack(side=LEFT,padx=20)

        slbl2 = Button(root2,text="⚙",font=("Lucida Console","20"),fg="green",bg="#171717",relief=FLAT,bd=0,command=settings2,highlightthickness=3)
        slbl2.pack(side=RIGHT)

    pass2 = StringVar()
    pass2.set("no")
    passed = StringVar()
    logo = Frame(window,bg="#1D1D1D")
    logo.pack(pady=30)
    logof = Frame(logo,bg="#1D1D1D")
    logof.pack()
    #Label(logof,text="""█▀
#▄█""",font=("Lucida Console","30"),fg="green",bg="#1D1D1D").pack(side=LEFT,padx=5)
    #Label(logof,text="""█▄ █
#█ ▀█""",font=("Lucida Console","30"),fg="white",bg="#1D1D1D").pack(side=LEFT,padx=5)

    #Label(logof,text="""▄▀█
#█▀█""",font=("Lucida Console","30"),fg="red",bg="#1D1D1D").pack(side=LEFT,padx=5)
    #Label(logof,text="""█▄▀
#█ █""",font=("Lucida Console","30"),fg="white",bg="#1D1D1D").pack(side=LEFT,padx=5)
    #Label(logof,text="""█▀▀
#██▄""",font=("Lucida Console","30"),fg="red",bg="#1D1D1D").pack(side=LEFT,padx=5)
    if random.randint(1,10000) != 1:
        image = PhotoImage(data="")
    else:
        image = PhotoImage(data="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")
    Label(logof,image=image,borderwidth=0).pack(side=LEFT)
    stt = Label(logo,text="",font=("Lucida Console","10"),fg="yellow",bg="#1D1D1D")
    stt.pack()
    typesplash()

    button = Button(window,text="START GAME",
                    font=("Terminal","30"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=3,
                    command=lambda: passed.set("pass"),
                    fg="white",
                    borderwidth=0,
                    highlightcolor="#ffffff",
                    )
    button.pack()
    f77 = Frame(window,bg="#1D1D1D")
    f77.pack()
    button1 = Button(f77,text="ITEMS",
                    font=("Terminal","30"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=3,
                    command=lambda: item(),
                    fg="#ffffff",
                    borderwidth=0,
                    highlightcolor="#ffffff",
                    )
    button1.pack(side=LEFT)
    button1a = Button(f77,text="nothing\nhere rn",
                    font=("Lucida Console","15"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=3,
                    fg="#ffffff",
                    borderwidth=0,
                    highlightcolor="#ffffff",
                    )
    loopvote()
    button1a.pack(side=RIGHT)
    button2 = Button(window,text="BLACK MARKET",
                    height=1,
                    font=("Terminal","30"),
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=3,
                    command=lambda: shop(),
                    fg="#ffffff",
                    borderwidth=0,
                    highlightcolor="#ffffff",
                    )
    button2.pack()
    logo.wait_variable(passed)
    f77.destroy()
    button1.destroy()
    button1a.destroy()
    button2.destroy()
    button.destroy()

    HL = Label(window,text="highscore: {}".format(highscore),
                    font=("Lucida Console","20"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=0,
                    fg="#ffffff",
                    borderwidth=0,
                    highlightcolor="#ffffff",)
    HL.pack()

    button1 = Button(window,text="PLAY",
                    font=("Terminal","30"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=0,
                    command=lambda: [pass2.set("yes"),passed.set("yes")],
                    fg="#ffffff",
                    borderwidth=0,
                    highlightcolor="#ffffff",
                    )
    button1.pack(side=BOTTOM)

    if not pass2.get() == "yes2":
        logo.wait_variable(passed)

    HL.destroy()
    button1.destroy()
    button2.destroy()
    button.destroy()
    
    if pass2.get() == "no":
 
        note = Label(window, text="coins cannot be earned in custom mode",bg="#1D1D1D",fg="white",font=("Comic Sans MS","8"))
        f1 = Frame(window,bg="#1D1D1D")
        f1.pack()
        button1l = Label(f1,text="gridsize:",bg="#1D1D1D",fg="#ffffff",font=("Lucida Console","15"))
        button1l.pack(side=LEFT)
        button1e = Entry(f1,width=10,font=("Comic Sans MS","15"))
        button1e.pack(side=RIGHT)
       
        f2 = Frame(window,bg="#1D1D1D")
        f2.pack(pady=20)
        button2l = Label(f2,text="speed:",bg="#1D1D1D",fg="#ffffff",font=("Lucida Console","15"))
        button2l.pack(side=LEFT)
        button2e = Entry(f2,width=10,font=("Comic Sans MS","15"))
        button2e.pack(side=RIGHT)
 
        var2 = IntVar()
        c = Checkbutton(window, bg="#1D1D1D",fg="white",font=("Comic Sans MS","8"), text='2 Player',selectcolor="green",variable=var2, onvalue=1, offvalue=0)
        c.pack()
        c.deselect()

        
        ready = Button(window,text="start",
                        height=1,
                        font=("Lucida Console","20"),
                        relief=FLAT,
                        highlightbackground="#ffffff",
                        bg="#1D1D1D",
                        highlightthickness=3,
                        command=lambda: passed.set("ready"),
                        fg="#ffffff",
                        borderwidth=4,
                        highlightcolor="#ffffff",
                        )
        ready.pack()
        note.pack()
 
        passed = StringVar()
        logo.wait_variable(passed)
 
        if var2.get() == 1:
            players = 2
        else:
            players = 1
 
        try:
            speed = float(button2e.get())
        except:
            messagebox.showerror(title="Error!",message="couldn't set speed to {}, that isn't a valid number! restarting script...".format(button2e.get()))
            os.execl(python, python, *sys.argv)
        window.config(bg="#1D1D1D")
 
        if 1 == 2:
            pass
        else:
            try:
                gridsize = int(button1e.get())
            except:
                messagebox.showerror(title="Error!",message="couldn't set gird size to {}, that isn't a valid number! restarting script...".format(button1e.get()))
                os.execl(python, python, *sys.argv)
 
        c.destroy()
        f1.destroy()
        button1l.destroy()
        button1e.destroy()
 
        f2.destroy()
        button2l.destroy()
        button2e.destroy()
 
        ready.destroy()
    else:
        speed = 1
        gridsize = 40
        inc = True
    logo.destroy()
 
start()
 
g = int(500/gridsize)

speed = int(float(speed) *100)
 
dead = 0
dead2 = 0
 
die = 1
die2 = 1
 
def findsquare(coords):
    return coords[0]-25,coords[1]+25

luckyc = ()
luckyr = None
luckyt = None

bombcc = []
miscc = []

shadowed = False
avsha = False

def shadow():
    global shadowed, speed, rea, avsha
    if avsha:
        avsha = False
        shadowed = True
        speed -= 20
        rea.config(text="shadowed for 5")
        time.sleep(1)
        rea.config(text="shadowed for 4")
        time.sleep(1)
        rea.config(text="shadowed for 3")
        time.sleep(1)
        rea.config(text="shadowed for 2")
        time.sleep(1)
        rea.config(text="shadowed for 1")
        time.sleep(1)
        rea.config(text="")
        speed += 20
        shadowed = False


def poison():
    global speed
    import time
    game.config(bg="red")
    time.sleep(0.2)
    game.config(bg="black")
    speed += 8


def startbm():
    import time
    if pass2.get() == "yes2":
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
    elif diff == "2":
        threading.Thread(target=lambda: bomb(1)).start()
    elif diff == "3":
        threading.Thread(target=lambda: bomb(2)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(2)).start()
    elif diff == "4":
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
    elif diff == "5":
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)

def missle(num):
    global bombcc, la, paused
    import time, threading
    misc = ()
    misr = None
    run = True
    while paused:
        pass
        time.sleep(0.2)
    while run == True:
        body = tuple(zip(x,y))
        misc = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
        miscc.append(misc)
        if not misc in body or 0 in misc or gridsize-1 in misc:
            run = False
    line1 = game.create_oval(misc[0]*g-30,misc[1]*g-30,misc[0]*g+30+g,misc[1]*g+g+30,tags="mis",fill="black",outline="red",width=2)
    line2 = game.create_line(misc[0]*g+g/2,misc[1]*g-50,misc[0]*g+g/2,misc[1]*g+g+50,tags="mis",fill="red",width=2)
    line3 = game.create_line(misc[0]*g-50,misc[1]*g+g/2,misc[0]*g+60,misc[1]*g+g/2,tags="mis",fill="red",width=2)
    line4 = game.create_oval(misc[0]*g-15,misc[1]*g-15,misc[0]*g+15+g,misc[1]*g+g+15,tags="mis",fill="black")
    game.tag_lower(line4)
    game.tag_lower(line3)
    game.tag_lower(line2)
    game.tag_lower(line1)
    time.sleep(1)
    gren = game.create_rectangle(misc[0]*g-30,misc[1]*g-30,misc[0]*g+30+g,misc[1]*g+g+30,tags="mis",fill="darkred",outline="red",width=3)
    time.sleep(0.1)
    game.delete(gren)
    gren = game.create_rectangle(misc[0]*g-25,misc[1]*g-25,misc[0]*g+25+g,misc[1]*g+g+25,tags="mis",fill="darkred",outline="red",width=3)
    time.sleep(0.1)
    game.delete(gren)
    gren = game.create_rectangle(misc[0]*g-20,misc[1]*g-20,misc[0]*g+20+g,misc[1]*g+g+20,tags="mis",fill="darkred",outline="red",width=3)
    time.sleep(0.1)
    game.delete(gren)
    gren = game.create_rectangle(misc[0]*g-15,misc[1]*g-15,misc[0]*g+15+g,misc[1]*g+g+15,tags="mis",fill="darkred",outline="red",width=3)
    time.sleep(0.1)
    game.delete(gren)
    gren = game.create_rectangle(misc[0]*g-10,misc[1]*g-10,misc[0]*g+10+g,misc[1]*g+g+10,tags="mis",fill="darkred",outline="red",width=3)
    time.sleep(0.1)
    game.delete(gren)
    game.delete(line1)
    game.delete(line2)
    game.delete(line3)
    game.delete(line4)
    time.sleep(0.1)
    game.create_oval(misc[0]*g-40,misc[1]*g-40,misc[0]*g+10+g,misc[1]*g+g,tags="mis",fill="#E25822")
    time.sleep(0.1)
    game.create_oval(misc[0]*g-20,misc[1]*g-20,misc[0]*g+30+g,misc[1]*g+g+30,tags="mis",fill="yellow") 
    time.sleep(0.1)
    game.create_oval(misc[0]*g+50,misc[1]*g,misc[0]*g-40+g,misc[1]*g+g+40,tags="mis",fill="orange")
    time.sleep(0.1)
    game.create_oval(misc[0]*g+0,misc[1]*g-50,misc[0]*g+50+g,misc[1]*g+g,tags="mis",fill="orange")
    time.sleep(1)
    game.delete("mis")
    miscc.remove(misc)
    time.sleep(random.randint(1,5))
    for i in body:
        if misc in body:
            paused = True
            messagebox.showinfo("you were bombed!")
            os.execl(python, python, *sys.argv)
    threading.Thread(target=lambda: missle(3)).start()
    game.update()


def bomb(num):
    global bombcc, la, paused
    import time, threading
    bombc = ()
    bombr = None
    run = True
    while paused:
        pass
        time.sleep(0.2)
    while run == True:
        body = tuple(zip(x,y))
        bombc = (random.randint(0,gridsize-1),random.randint(0,gridsize-1),False)
        bombcc.append(bombc)
        if not bombc in body or 0 in bombc or gridsize-1 in bombc:
            run = False
    bombr = game.create_rectangle(bombc[0]*g,bombc[1]*g,bombc[0]*g+g,bombc[1]*g+g,tags="bomb",fill="#960000")
    while paused:
        pass
        time.sleep(0.2)
    if la.get():
        line1t = game.create_line(bombc[0]*g+6,6,bombc[0]*g+6,506,fill="#270400", width=5)
        line2t = game.create_line(6,bombc[1]*g+6,506,bombc[1]*g+6,fill="#270400", width=5)
        game.tag_lower(line1t)
        game.tag_lower(line2t)

    while paused:
        pass
        time.sleep(0.2)
    time.sleep(2+totalscore[0]/40)
    while paused:
        pass
        time.sleep(0.2)
    line1 = game.create_line(bombc[0]*g+6,6,bombc[0]*g+6,506,fill="red", width=5,tags="bomb")
    line2 = game.create_line(6,bombc[1]*g+6,506,bombc[1]*g+6,fill="red", width=5)
    game.tag_lower(line1)
    game.tag_lower(line2)
    if la.get():
        game.tag_lower(line1t)
        game.tag_lower(line2t)
    oldbombc = bombc
    bombc2 = list(bombc)
    bombc2[2] = True
    bombc = tuple(bombc2)
    for i in range(len(bombcc)):
        if bombcc[i] == oldbombc:
            bombcc[i] = bombc
    while paused:
        pass
        time.sleep(0.2)
    if num == 1:
        time.sleep(1)
    elif num == 2:
        time.sleep(random.randint(1,3))
    elif num == 3:
        time.sleep(random.randint(2,5))
    else:
        time.sleep(random.randint(1,10))
    while paused:
        pass
        time.sleep(0.2)
    game.delete(bombr)
    game.delete(line1)
    game.delete(line2)
    if la.get():
        game.delete(line1t)
        game.delete(line2t)
    
    bombcc.remove(bombc)
    time.sleep(random.randint(1,3))
    threading.Thread(target=lambda: bomb(num)).start()

picked = "white"
colors = ["red","orange","yellow","lightgreen","green","blue","purple","pink"]
cur = "red"

def printsnek(x11,x22,x33,x44, ie):
    global shadowed, picked, mode1, cur, colors, blind
    if data1["eq"] == 17:
        data1["eq"] = 0
    if blind:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="black",outline="",width=2)
        game.create_rectangle(x11-2,x22-2,x33+2,x44+2,tags='square3',fill="white",outline="")
    elif shadowed:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="darkgray",outline="lightgray",width=2)
        root2.config(highlightbackground="light gray")
        
    elif spiced:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="orange",outline="red",width=2)
        root2.config(highlightbackground="red")
        
    elif data1["eq"] == 0:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="green",outline="")
        root2.config(highlightbackground="green")
        game.config(highlightthickness=0)
    elif data1["eq"] == 1:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="light green",outline="")
        root2.config(highlightbackground="light green")
        
    elif data1["eq"] == 2:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="light blue",outline="")
        root2.config(highlightbackground="light blue")
        
    elif data1["eq"] == 3:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="pink",outline="")
        root2.config(highlightbackground="pink")
        
    elif data1["eq"] == 4:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="orange",outline="")
        root2.config(highlightbackground="orange")
        
    elif data1["eq"] == 5:
        game.create_oval(x11,x22,x33,x44,tags="square",fill="green",outline="")
        root2.config(highlightbackground="green")
        
    elif data1["eq"] == 6:
        game.create_oval(x11,x22,x33,x44,tags="square",fill="gray",outline="")
        root2.config(highlightbackground="gray")
        
    elif data1["eq"] == 7:
        game.create_oval(x11,x22,x33,x44,tags="square",fill="white",outline="")
        root2.config(highlightbackground="white")
        
    elif data1["eq"] == 8:
        game.create_oval(x11,x22,x33,x44,tags="square",fill="orange",outline="")
        root2.config(highlightbackground="orange")
        
    elif data1["eq"] == 9:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="green",outline='white', width=2)
        root2.config(highlightbackground="white")
        
    elif data1["eq"] == 10:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="black",outline='red', width=2)
        root2.config(highlightbackground="red")
        
    elif data1["eq"] == 11:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="blue",outline='yellow', width=2)
        root2.config(highlightbackground="yellow")
        
    elif data1["eq"] == 12:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="black",outline='orange', width=2)
        game.create_oval(x11+2,x22+2,x33-3,x44-3,tags="square",fill="orange")
        root2.config(highlightbackground="orange")
        
    elif data1["eq"] == 13:
        game.create_rectangle(x11,x22,x33,x44,tags='square',fill='lightblue',outline='blue', width=2)
        game.create_rectangle(x11+4,x22+4,x33+-4,x44+-4,tags='square',fill='lightblue',outline='blue',width=2)
        root2.config(highlightbackground="blue")
        
    elif data1["eq"] == 14:
        game.create_rectangle(x11,x22,x33,x44,tags='square',fill='black',outline='green', width=2)
        game.create_oval(x11-1,x22-1,x33,x44,tags='square',fill='black',outline='green',width=2)
        root2.config(highlightbackground="green")
        
    elif data1["eq"] == 15:
        game.create_rectangle(x11,x22,x33,x44,tags='square',fill='black',outline='blue', width=2)
        game.create_text(x11+6,x22+6,text="50",tags='square',fill='blue',font=("Arial","6"))
        root2.config(highlightbackground="blue")
        
    elif data1["eq"] == 16:
        game.create_rectangle(x11,x22,x33,x44,tags='square',fill='black',outline='purple', width=2)
        game.create_text(x11+6,x22+6,text="80",tags='square',fill='purple',font=("Arial","6"))
        root2.config(highlightbackground="purple")
        
    elif data1["eq"] == 17:
        pass
    elif data1["eq"] == 18:
        game.create_rectangle(x11,x22,x33,x44,tags='square',fill='red',outline="")
        game.create_line(x33-1,x22+1,x11+1,x44-1,tags='square',fill="white",width=4)
        root2.config(highlightbackground="white")
        

        game.create_rectangle(x11-2,x22-2,x33+2,x44+2,tags='square3',fill="white",outline="")
        
    
    elif data1["eq"] == 19:

        def checkEvenOdd(num):
            if(num==0):
                return "green"
            elif(num==1):
                return "red"
            else:
                return checkEvenOdd(num-2)
        game.create_rectangle(x11,x22,x33,x44,tags='square',fill='white',outline="")
        game.create_line(x33-1,x22+1,x11+1,x44-1,tags='square',fill=checkEvenOdd(ie),width=4)
        root2.config(highlightbackground="white")
        

    game.tag_lower("square")
    game.tag_lower("square3")
    if ie == 1 and la2.get():
        if direction == "u":
            game.create_oval(x11-6,x22-6,x11+4,x22+4,tags='square',fill='white')
            game.create_oval(x33+6,x22+4,x33-4,x22-6,tags='square',fill='white')
            
            game.create_oval(x11-3,x22-3,x11+2,x22+2,tags='square',fill='black')
            game.create_oval(x33+3,x22+2,x33-2,x22-3,tags='square',fill='black')
        elif direction == "d":
            game.create_oval(x11-6,x44-6,x11+4,x44+4,tags='square',fill='white')
            game.create_oval(x33+6,x44+4,x33-4,x44-6,tags='square',fill='white')

            game.create_oval(x11-3,x44-3,x11+2,x44+2,tags='square',fill='black')
            game.create_oval(x33+3,x44+2,x33-2,x44-3,tags='square',fill='black')
        elif direction == "l":
            game.create_oval(x11-6,x22-6,x11+4,x22+4,tags='square',fill='white')
            game.create_oval(x11+6,x44+4,x11-4,x44-6,tags='square',fill='white')

            game.create_oval(x11-3,x22-3,x11+2,x22+2,tags='square',fill='black')
            game.create_oval(x11+3,x44+2,x11-2,x44-3,tags='square',fill='black')
        elif direction == "r":
            game.create_oval(x33-6,x22-6,x33+4,x22+4,tags='square',fill='white')
            game.create_oval(x33+6,x44+4,x33-4,x44-6,tags='square',fill='white')

            game.create_oval(x33-3,x22-3,x33+2,x22+2,tags='square',fill='black')
            game.create_oval(x33+3,x44+2,x33-2,x44-3,tags='square',fill='black')
        

spiced = False

def restart():
    global speed, x, y, g, die, dead, gridsize, inc, luckyc, luckyr, luckyt, bombcc, miscc, applet, apple, applebody, appleid, applesp
    speed = 1
    gridsize = 40
    inc = True
    
    g = int(500/gridsize)

    speed = int(float(speed) *100)
    
    dead = 0
    dead2 = 0
    
    die = 1
    die2 = 1

    shadowed = False
    avsha = False

    x = [int(round(gridsize/2))]
    y = [int(round(gridsize/2))]
    
    x2 = [int(round(gridsize/2))]
    y2 = [int(round(gridsize/2))]

    for i in appleid:
        game.delete("all")

    totalscore[0] = 1

    applet = []
    apple = []
    applebody = []
    appleid = []
    applesp = []

    if pass2.get() == "true":
        placeapple(five=True)
    elif not pass2.get() == "yes2":
        if ton:
            for i in range(12000):
                placeapple()
        elif players == 2:
            for i in range(3):
                placeapple()
        else:
            for i in range(int(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[5][1:])):
                placeapple()
    
    game.delete(apple)
    
  

def spice(type):
    global spiced, speed
    spiced = True
    speed -= 40
    if type == "rs":
        time.sleep(1)
    if type == "ys":
        time.sleep(3)
    if type == "bs":
        time.sleep(9)
    speed += 40
    spiced = False

def luckyapple(starting):
    global luckyc, luckyr, luckyt
    if starting:
        luckyc = ()
        game.delete(luckyr)
        game.delete(luckyt)
    run = True
    if random.randint(0,200) == 11:
        luckyc = ()
        game.delete(luckyr)
        game.delete(luckyt)
        while run == True:
            body = tuple(zip(x,y))
            luckyc = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
            if not luckyc in body or 39 in luckyc:
                run = False
        luckyr = game.create_rectangle(luckyc[0]*g,luckyc[1]*g,luckyc[0]*g+g,luckyc[1]*g+g,tags="lucky",fill="red",outline="white",width=1)
        luckyt = game.create_text(luckyc[0]*g+7,luckyc[1]*g+7,text="?",tags="lucky",fill="white",font=("Lucida Console","9","bold"))

def placeapple(five=False):
    global gridsize, speed, inc, applebody, appleid, applet, appf, applesp
    run = True
    if five:
        tryit = 3
    else:
        tryit = 1
    for i in range(tryit):
        if (random.randint(0,15) == 1 and totalscore[0] >= 10 and (not shadowed or not avsha)):
            while run == True:
                coords = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
                body = tuple(zip(x,y))
                if not coords in body or 39 in coords:
                    run = False
            appf = "darkgray"
            applet.append("s")
            spice = False
            applesp.append("no")
            continueit = True
            while continueit:
                ran = str(random.randint(0,100000))
                if not ran in appleid:
                    app = len(appleid)
                    appleid.append(ran)
                    continueit = False
        elif random.randint(0,20) == 3:
            while run == True:
                coords = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
                body = tuple(zip(x,y))
                if not coords in body or 39 in coords:
                    run = False
            spice = False
            applesp.append("no")
            appf = "cash"
            applet.append("cash")
            continueit = True
            while continueit:
                ran = str(random.randint(0,100000))
                if not ran in appleid:
                    app = len(appleid)
                    appleid.append(ran)
                    continueit = False
        elif random.randint(0,20) == 3:
            while run == True:
                coords = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
                body = tuple(zip(x,y))
                if not coords in body or 39 in coords:
                    run = False
            if random.randint(0,10) == 5:
                spice = True
                applesp.append("yes")
            else:
                spice = False
                applesp.append("no")
            appf = "blue"
            applet.append("b")
            continueit = True
            while continueit:
                ran = str(random.randint(0,100000))
                if not ran in appleid:
                    app = len(appleid)
                    appleid.append(ran)
                    continueit = False
        elif random.randint(0,5) == 5:
            while run == True:
                coords = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
                body = tuple(zip(x,y))
                if not coords in body or 39 in coords:
                    run = False
            appf = "yellow"
            applet.append("y")
            if random.randint(0,10) == 1:
                spice = True
                applesp.append("yes")
            else:
                spice = False
                applesp.append("no")
            continueit = True
            while continueit:
                ran = str(random.randint(0,100000))
                if not ran in appleid:
                    app = len(appleid)
                    appleid.append(ran)
                    continueit = False
        else:
            while run == True:
                coords = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
                body = tuple(zip(x,y))
                if not coords in body or 39 in coords:
                    run = False
            appf = "red"
            applet.append("r")
            if random.randint(0,10) == 10:
                spice = True
                applesp.append("yes")
            else:
                spice = False
                applesp.append("no")
            continueit = True
            while continueit:
                ran = str(random.randint(0,100000))
                if not ran in appleid:
                    app = len(appleid)
                    appleid.append(ran)
                    continueit = False
        apple.append(coords)
        coords = list(coords)
        if appf != "darkgray":
            if not spice:
                if appf == "red":
                    applebody.append(game.create_oval(coords[0]*g,coords[1]*g,coords[0]*g+g,coords[1]*g+g,tags="{}".format(appleid[app]),fill=appf,outline="white",width=1))
                elif appf == "cash":
                    applebody.append(game.create_oval(coords[0]*g-1,coords[1]*g-1,coords[0]*g+g+1,coords[1]*g+g+1,tags="{}".format(appleid[app]),fill="#F1EDC3", outline="brown", width=2))
                else:
                    applebody.append(game.create_oval(coords[0]*g,coords[1]*g,coords[0]*g+g,coords[1]*g+g,tags="{}".format(appleid[app]),fill=appf))
            else:
                applebody.append(game.create_oval(coords[0]*g,coords[1]*g,coords[0]*g+g,coords[1]*g+g,tags="{}".format(appleid[app]),fill=appf,outline="orange",width=2))
        else:
            applebody.append(game.create_oval(coords[0]*g,coords[1]*g,coords[0]*g+g,coords[1]*g+g,tags="{}".format(appleid[app]),fill=appf,outline="lightgray",width=2))
totalcoins = 0

def move():
    if not pass2.get() == "yes2":
        luckyapple(False)
    global paused, picked, rea, avsha, x, y, speed, totalcoins, direction, die, score, gridsize, cla, g, dead, players, invin, dead2, player1dead, totalscore, appleid, applebody, applet, appf
    if die != 0:
        die -= 1
    if direction == "u":
        x.insert(0,x[0])
        y.insert(0,y[0]-1)
    elif direction == "d":
        x.insert(0,x[0])
        y.insert(0,y[0]+1)
    elif direction == "l":
        x.insert(0,x[0]-1)
        y.insert(0,y[0])
    elif direction == "r":
        x.insert(0,x[0]+1)
        y.insert(0,y[0])
    if x[0] == -1:
        x[0] = gridsize
    elif x[0] == gridsize+1:
        x[0] = 0
    elif y[0] == -1:
        y[0] = gridsize-1
    elif y[0] == gridsize:
        y[0] = 0
    tx = x
    ty = y
    for i in range(len(x),1):
        x[i-1] = tx[i-2]
        y[i-1] = ty[i-2]
    x.pop()
    y.pop()
    game.delete("square")
    game.delete("square3")
    game.delete("square5")

    for i in range(len(applebody)):
        if apple[i-1] in list(zip(x,y)):
            if random.randint(1,30) != 2 or len(x) < 8:
                if inc:
                    if diff == "5":
                        speed -= 10
                    elif diff == "4":
                        speed -= 5
                    elif not diff == "1":
                        speed -= 2
                game.delete(appleid[i-1])
                game.delete(applebody[i-1])
                applebody.pop(i-1)
                apple.pop(i-1)
                appleid.pop(i-1)
                value = applet.pop(i-1)
                sp = applesp.pop(i-1)
                die += 1
                scorep = 1
                if value == "r":
                    x.append(x[len(x)-1])
                    y.append(y[len(y)-1])
                    totalcoins += 2
                    picked = "red"
                elif value == "y":
                    for i in range(5):
                        x.append(x[len(x)-1])
                        y.append(y[len(y)-1])
                    totalcoins += 8
                    die += 5
                    scorep = 5
                    picked = "yellow"
                elif value == "b":
                    for i in range(15):
                        x.append(x[len(x)-1])
                        y.append(y[len(y)-1])
                    totalcoins += 35
                    die += 20
                    scorep = 15
                    picked = "blue"
                elif value == "s":
                    avsha = True
                    rea.config(text="press f to shadow")
                    picked = "gray"
                elif value == "cash":
                    totalcoins += 50
                if sp == "yes":
                    threading.Thread(target=lambda: spice("{}s".format(value))).start()
            else:
                game.delete(appleid[i-1])
                game.delete(applebody[i-1])
                applebody.pop(i-1)
                apple.pop(i-1)
                appleid.pop(i-1)
                value = applet.pop(i-1)
                sp = applesp.pop(i-1)
                threading.Thread(target=blindness).start()
            placeapple()
    if luckyc in list(zip(x,y)):
        if not pass2.get() == "yes2":
            luckyapple(True)
        if diff == 1:
            e = random.randint(1,3)
            if e == 1:
                game.delete("square")
                game.delete("square3")
                game.delete("square5")
                if not diff == "1":
                    coinee()
                if totalscore[0] > highscore:
                    writehs()
                if messagebox.askyesno(title="you died!",message="The lucky block chose death upon you!\nyou were out of luck\n\ndo you want to restart?"):
                    restart()
                else:
                    os.execl(python, python, *sys.argv)
                    
            else:
                for i in range(totalscore[0]):
                    x.append(x[len(x)-1])
                    y.append(y[len(y)-1])
                totalcoins += 20
                die += totalscore[0]
                scorep = totalscore[0]
                picked = "purple"
        else:
            e = random.randint(1,3)
            if e == 1:
                game.delete("square")
                game.delete("square3")
                game.delete("square5")
                if not diff == "1":
                    coinee()
                if totalscore[0] > highscore:
                    writehs()
                if messagebox.askyesno(title="you died!",message="The lucky block chose death upon you!\nyou were out of luck\n\ndo you want to restart?"):
                    restart()
                else:
                    os.execl(python, python, *sys.argv)
            else:
                for i in range(totalscore[0]):
                    x.append(x[len(x)-1])
                    y.append(y[len(y)-1])
                totalcoins += 20
                die += totalscore[0]
                scorep = totalscore[0]
                picked = "purple"
                
    try:
        totalscore[0] += scorep
    except:
        pass
   
    if invin:
        die = 100000
 
    player1dead.config(text=" {}".format(totalscore[0]))

    coinss.config(text=" {}".format(totalcoins))

    for i in range(len(x)):
        i += 1
        printsnek(x[i-1]*g,y[i-1]*g,x[i-1]*g+g,y[i-1]*g+g,i)
    for i in bombcc:
        if i[2] and not shadowed:
            count = 0
            for z in range(41):
                z -= 1
                count += 1
                ee = (i[0],count)
                body = list(zip(x,y))
                if ee in body:
                    if not diff == "1":
                        coinee()
                    if totalscore[0] > highscore:
                        writehs()
                    if messagebox.askyesno(title="you died!",message="you were burned by a laser!\n\ndo you want to restart?"):
                        restart()
                    else:
                        os.execl(python, python, *sys.argv)
            count = 0
            for z in range(41):
                z -= 1
                count += 1
                ee = (count,i[1])
                body = list(zip(x,y))
                if ee in body:
                    if not diff == "1":
                        coinee()
                    if totalscore[0] > highscore:
                        writehs()
                    if messagebox.askyesno(title="you died!",message="you were burned by a laser!\n\ndo you want to restart?"):
                        restart()
                    else:
                        os.execl(python, python, *sys.argv)

    if not paused:
        window.after(speed,move)
 
def move2():
    global x2, y2, direction2, die2, score, gridsize, cla, g, players, dead2, dead, player2dead, invin, totalscore, appleid, applebody, applet, appf
    if die2 != 0:
        die2 -= 1
    if  direction2 == "u":
        x2.insert(0,x2[0])
        y2.insert(0,y2[0]-1)
    elif direction2 == "d":
        x2.insert(0,x2[0])
        y2.insert(0,y2[0]+1)
    elif direction2 == "l":
        x2.insert(0,x2[0]-1)
        y2.insert(0,y2[0])
    elif direction2 == "r":
        x2.insert(0,x2[0]+1)
        y2.insert(0,y2[0])
    tx2 = x2
    ty2 = y2
    for i in range(len(x2),1):
        x2[i-1] = tx2[i-2]
        y2[i-1] = ty2[i-2]
    x2.pop()
    y2.pop()
    game.delete("square2")
    for i in range(len(x2)):
        i += 1
        game.create_rectangle(x2[i-1]*g,y2[i-1]*g,x2[i-1]*g+g,y2[i-1]*g+g,tags="square2",fill="lightblue")
    for i in range(len(applebody)):
        if apple[i-1] in list(zip(x2,y2)):
            game.delete(appleid[i-1])
            game.delete(applebody[i-1])
            applebody.pop(i-1)
            apple.pop(i-1)
            appleid.pop(i-1)
            value = applet.pop(i-1)
            die2 += 1
            placeapple()
            scorep2 = 1
            if value == "r":
                x2.append(x2[len(x2)-1])
                y2.append(y2[len(y2)-1])
            elif value == "y":
                for i in range(5):
                    x2.append(x2[len(x2)-1])
                    y2.append(y2[len(y2)-1])
                die2 += 5
                scorep2 = 5
            elif value == "b":
                for i in range(20):
                    x.append(x[len(x)-1])
                    y.append(y[len(y)-1])
                die2 += 20
                scorep2 = 20
    try:
        totalscore[1] += scorep2
    except:
        pass
   
    if invin:
        die2 = 100000
 
    player2dead.config(text="player 2: {}".format(totalscore[1]))
               
    if len(list(zip(x2,y2))) != len(set(zip(x2,y2))) and die2 == 0:
        if dead == 1 and dead2 == 1:
            quote()
            if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                os.execl(python, python, *sys.argv)
        else:
            game.delete("square2")
            player2dead.config(fg="red")
            dead2 = 1
            if dead == 1 and dead2 == 1:
                quote()
                if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                    os.execl(python, python, *sys.argv)
    elif -1 in x2 or -1 in y2 or gridsize in x2 or gridsize in y2:
        if dead == 1 and dead2 == 1:
            quote()
            if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                os.execl(python, python, *sys.argv)
        else:
            game.delete("square2")
            player2dead.config(fg="red")
            dead2 = 1
            if dead == 1 and dead2 == 1:
                quote()
                if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                    os.execl(python, python, *sys.argv)
    else:
        window.after(speed,move2)
 
direction = "u"
direction2 = "u"
 
applet = []
apple = []
applebody = []
appleid = []
applesp = []
 
x = [int(round(gridsize/2))]
y = [int(round(gridsize/2))]
 
x2 = [int(round(gridsize/2))]
y2 = [int(round(gridsize/2))]
 
def up(event):
    global x, y, direction
    direction = "u"
 
def down(event):
    global x, y, direction
    direction = "d"
 
def left(event):
    global x, y, direction
    direction = "l"
 
def right(event):
    global x, y, direction
    direction = "r"
 
def up2(event):
    global x, y, direction2
    direction2 = "u"
 
def down2(event):
    global x, y, direction2
    direction2 = "d"
 
def left2(event):
    global x, y, direction2
    direction2 = "l"
 
def right2(event):
    global x, y, direction2
    direction2 = "r"
 
root.bind("<Up>", up)
root.bind("<Down>", down)
root.bind("<Left>", left)
root.bind("<Right>", right)
 
root.bind("<w>", up)
root.bind("<s>", down)
root.bind("<a>", left)
root.bind("<d>", right)

root.bind("<f>", lambda i: threading.Thread(target=shadow).start())

newslbl.destroy()
slbl2.destroy()

root.geometry("805x505")
window.config(bg="#1D1D1D")
game = Canvas(window,bg="#000000",width=500,height=500,cursor="none",highlightthickness=0)
game.pack(side=LEFT)
 
for i in range(len(x)):
    i += 1
    printsnek(x[i-1]*g,y[i-1]*g,x[i-1]*g+g,y[i-1]*g+g,i)
    if players == 2:
        printsnek(x[i-1]*g,y[i-1]*g,x[i-1]*g+g,y[i-1]*g+g,i)
 
if pass2.get() == "true":
    placeapple(five=True)
elif not pass2.get() == "yes2":
    if ton:
        for i in range(12000):
            placeapple()
    elif players == 2:
        for i in range(3):
            placeapple()
    else:
        for i in range(int(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[5][1:])):
            placeapple()
       

deaad = Frame(window,bg="#1D1D1D")
deaad.pack(padx=5,fill=X)

deadumm = Frame(deaad,bg="#1D1D1D")
deadumm.pack(side=RIGHT,expand=True)

st = Label(deadumm,text="""
█▀ ▀█▀ ▄▀█ ▀█▀ █▀ ▀
▄█  █  █▀█  █  ▄█ ▄""",fg="green",bg="#1D1D1D",font=("Lucida Console","6"))

st.pack(pady=10)

allt = Frame(deadumm,bg="#1D1D1D")
allt.pack(pady=50)

p1d = Frame(allt, bg="#1D1D1D")
p1d.pack()

player1deada = Label(p1d,text="""
█▀ █▀▀ █▀█ █▀█ █▀▀ ▀
▄█ █▄▄ █▄█ █▀▄ ██▄ ▄""",fg="white",bg="#1D1D1D",font=("Lucida Console","6"))
player1dead = Label(p1d,text=" 1",fg="white",bg="#1D1D1D",font=("Comic Sans MS","15","bold"))
player1deada.pack(side=LEFT)
player1dead.pack(side=RIGHT)


c1d = Frame(allt, bg="#1D1D1D")
c1d.pack()

bg.config(bg="#171717")

ca = Label(c1d,text="""
█▀▀ █▀█ █ █▄ █ █▀ ▀
█▄▄ █▄█ █ █ ▀█ ▄█ ▄""",fg="white",bg="#1D1D1D",font=("Lucida Console","6"))
ca.pack(side=LEFT)

coinss = Label(c1d,text="coins: 0",fg="white",bg="#1D1D1D",font=("Comic Sans MS","15","bold"))
coinss.pack(side=RIGHT)

rea = Label(deadumm,text="",fg="white",bg="#1D1D1D",font=("Comic Sans MS","15","bold"))
rea.pack(pady=20)

window.after(speed,move)

paused = False

threading.Thread(target=startbm).start()

if players == 2:
    player2dead = Label(deadumm,text="player 2: 1",fg="white",bg="#1D1D1D",font=("Comic Sans MS","15"))
    player2dead.pack()
    window.after(speed,move2)
else:
    deaad.pack(padx=12,fill=X)

nwe66 = None

def pause():
    global paused, nwe66, speed, move
    if paused:
        nwe66.destroy()
        window.after(speed,move)
        paused = False
    else:
        paused = True
        nwe66 = Toplevel()
        nwe66.attributes("-alpha",0.5)
        nwe66.overrideredirect(True)
        nwe66.config(bg="#1D1D1D")
        Label(nwe66,text="""
    █▀█ ▄▀█ █ █ █▀ █▀▀ █▀▄
    █▀▀ █▀█ █▄█ ▄█ ██▄ █▄▀""",font=("Lucida Console","15"),fg="green",bg="#1D1D1D").place(relx=0.45,rely=0.1,anchor="center")
        def top():
            try:
                nwe66.attributes("-topmost",True)
                nwe66.geometry("500x466+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-398),str(int(root.winfo_y()+root.winfo_height()/2)-220)))
                nwe66.after(1,top)
            except:
                pass
        nwe66.after(1,top)


p = Button(title_bar,text="pause",relief="flat",command=lambda: threading.Thread(target=pause).start(),bg="#171717",fg="white")
p.pack()

root.mainloop()
