"""

████████╗██╗  ██  █████╗ ███╗  ██╗██╗  ██╗  ██╗   ██╗ █████╗ ██╗   ██╗
╚══██╔══╝██║  ██║██╔══██╗████╗ ██║██║ ██╔╝  ╚██╗ ██╔╝██╔══██╗██║   ██║
   ██║   ███████║███████║██╔██╗██║█████═╝    ╚████╔╝ ██║  ██║██║   ██║
   ██║   ██╔══██║██╔══██║██║╚████║██╔═██╗     ╚██╔╝  ██║  ██║██║   ██║
   ██║   ██║  ██║██║  ██║██║ ╚███║██║ ╚██╗     ██║   ╚█████╔╝╚██████╔╝
   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚══╝╚═╝  ╚═╝     ╚═╝    ╚════╝  ╚═════╝ 

    for downloading snek! to download this:
        1) copy all of the text from this file
        2) open up python idle
        3) press file, then new file
        4) paste all of the code in there
        5) press run, and then press ok
        6) save in your desired location
        (recommended to save in an empty folder)

        you can save the python name as anything you want
        (use a name that will be easy to remember)

        and voila! You have successfully installed snake! to run the game again, go to
        the folder you have saved snek in, and then double tap the .py file


    psst! use code MEGAUPDATE for a free skin!

"""














































import os, io, time, random
from tkinter import messagebox

try:
    # For Python 3.0 and later
    from urllib.request import urlopen
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen


response = urlopen("https://raw.githubusercontent.com/dominikcoderXZC/snek/main/Snek_v1.2_BETA_(play_early)")
data = response.read().decode('utf-8')
if open(__file__,"r",encoding='utf-8').read() != data:
    messagebox.showinfo(title="update",message="a new update is available, press ok to update")
    open(__file__,"w",encoding='utf-8').write(data)


def show_exception_and_exit(exc_type, exc_value, tb):
    import traceback
    traceback.print_exception(exc_type, exc_value, tb)
    input("Press key to exit.")
    sys.exit(-1)

import sys
sys.excepthook = show_exception_and_exit

os.system("cd ")

if not os.path.exists(os.path.dirname(os.path.realpath(__file__))+"\.data"):
    open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w").write("""#{'eq': 0, 'items': [0,0,0,0,0,0,0,0,0,0,0,0,0,0]}
#0
#0
#None
#[1, 3, 5, 7]
#2
"""
)

if time.strftime("%A") != open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[3][1:]:
    temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
    temp2[3] = time.strftime("#%A") + "\n"
    t = []
    for i in range(4):
        passed = True
        while passed:
            r = random.randint(1,12)
            if not r in t:
                t.append(r)
                passed = False
    temp2[4] = "#" + str(t) + "\n"
    open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w").write(''.join(temp2))
    
        

highscore = int(eval(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[2][1:]))

data1 = eval(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[0][1:])

ish = eval(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[4][1:])

money = eval(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[1][1:])
 
 
from tkinter import *
from tkinter import messagebox, ttk, simpledialog
import sys, os, random, threading, time
import urllib.request, json, webbrowser
 
import json
try:
    # For Python 3.0 and later
    from urllib.request import urlopen
except ImportError:
    # Fall back to Python 2's urllib2
    from urllib2 import urlopen

try:
    response = urlopen("https://raw.githubusercontent.com/dominikcoderXZC/snek/main/snek.json")
    data = response.read().decode("utf-8")
    news = json.loads(data)
    news = news["news"]
    
    response2 = urlopen("https://raw.githubusercontent.com/dominikcoderXZC/snek/main/tos.json")
    data2 = response2.read().decode("utf-8")
    toss = json.loads(data2)
    toss = toss["tos"]

except:
    news = "no internet"
    toss = "no internet"

def writehs():
    data1["items"][0] = 1
    temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
    temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
    temp2[2] = "#" + str(totalscore[0]) + "\n"
    for i in temp2:
        
        temp.write(i)
        temp.flush()

def coinee():
    data1["items"][0] = 1
    temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
    temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
    temp2[1] = "#" + str(int(money) + int(totalcoins)) + "\n"
    for i in temp2:
        
        temp.write(i)
        temp.flush()

def get_pos(event):
    global xwin
    global ywin
 
    xwin = event.x
    ywin = event.y
 
def move_window(event):
    root.geometry('+{}+{}'.format(event.x_root - xwin,event.y_root - ywin))
 
def change_on_hovering(event):
    close_button['bg'] = 'red'
 
def return_to_normal_state(event):
    close_button['bg'] = back_ground
 
back_ground = "#171717"
content_color = "#ffffff"
 
 
root = Tk()
 
root.wm_attributes("-topmost",True)
 
root.config(bg="#171717")
 
root.overrideredirect(True)
 
window = Frame(root, bg='#1D1D1D')
 
def closeit():
    root.destroy()
    os._exit(0)
 
title_bar = Frame(root, bg=back_ground, relief='raised', bd=0,
                     highlightcolor=back_ground,
                     highlightthickness=0)
 
close_button = Button(title_bar, text='x', bg=back_ground, padx=5, pady=2,
                         bd=0, font="bold", fg='white',
                         activebackground="red",
                         activeforeground="white",
                         highlightthickness=0,
                         command=closeit)
 
title_window = "Snek v1.2"
title_name = Label(title_bar, text=title_window, bg=back_ground, fg="white")
 
title_bar.pack(fill='x', side=TOP)
title_name.pack(side='left')
close_button.pack(side='right')
window.pack(fill='both',expand=True)
 
title_bar.bind("<B1-Motion>", move_window)
title_bar.bind("<Button-1>", get_pos)
close_button.bind('<Enter>', change_on_hovering)
close_button.bind('<Leave>', return_to_normal_state)
 
version = "1.2.0"
 
def quote():
    quotes = ["Snek v1.2"]
    title_name.config(text=random.choice(quotes))
 
root.attributes('-topmost', 1)
 
 
 
def state():
    if root.state() == "normal":
        root.overrideredirect(True)
    try:
        root.after(10,state)
    except:
        sys.exit()
 
root.overrideredirect(True)
root.geometry('800x500+200+200')
 
state()

python = sys.executable
 
invin = False
 
cla = ["red","yellow","green"]
 
snaker = PhotoImage("./snake.png")
 
gridsize = 10
speed = 1.5
 
def close():
    if messagebox.askokcancel(title="cancel",message="are you sure you want to exit?") == True:
        window.destroy()
        try:
            passed.set("hello")
        except:
            pass
        sys.exit()
 
def news2():
    nwe = Toplevel()
    def top():
        nwe.attributes("-topmost",True)
        nwe.geometry("300x300+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-150),str(int(root.winfo_y()+root.winfo_height()/2)-150)))
        nwe.after(10,top)
    nwe.overrideredirect(True)
    nwe.config(bg="#252525")
    Label(nwe,text=news,fg="green",bg="#252525",font=("Lucida Console","10")).pack()
    Button(nwe,text="close",fg="green",bg="#252525",font=("Lucida Console","20"),command=nwe.destroy).pack(side=BOTTOM)
    nwe.after(10,top)
 
root.config(cursor="dot")
 
diff = "2"
 
def tos():
    global toss, settings2
    nwe = Toplevel()
    def top():
        nwe.attributes("-topmost",True)
        nwe.geometry("500x400+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-250),str(int(root.winfo_y()+root.winfo_height()/2)-200)))
        nwe.after(10,top)
    nwe.overrideredirect(True)
    nwe.config(bg="#252525")
    Label(nwe,text=toss,fg="green",bg="#252525",font=("Lucida Console","10")).pack()
    Button(nwe,text="close",fg="green",bg="#252525",font=("Lucida Console","20"),command=lambda: [nwe.destroy(),settings2()]).pack(side=BOTTOM)
    nwe.after(10,top)

def item():
    global toss, settings2
    nwe = Toplevel()
    def top():
        nwe.attributes("-topmost",True)
        nwe.geometry("500x400+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-250),str(int(root.winfo_y()+root.winfo_height()/2)-200)))
        nwe.after(10,top)
    nwe.overrideredirect(True)
    nwe.config(bg="#252525")
    Label(nwe,text="""
█ ▀█▀ █▀▀ █▀▄▀█ █▀
█  █   ██▄ █ ▀ █ ▄█""",fg="green",bg="#252525",font=("Lucida Console","10")).pack()
    Button(nwe,text="close",fg="green",bg="#252525",font=("Lucida Console","20"),command=lambda: nwe.destroy()).pack(side=BOTTOM)
    def checkish1(num):
        items66 = {
            1: "lightgreen",
            2: "lightblue",
            3: "pink",
            4: "orange",
            5: "green",
            6: "gray",
            7: "white",
            8: "orange",
            9: ["green", "white"],
            10: ["black", "red"],
            11: ["blue", "yellow"],
            12: ["black","orange"]
        }
        if num == 0:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='green')"""]
        if num >= 1 and num < 5:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='{}')""".format(items66[num])]
        elif num >= 5 and num < 9:
            return ["""re2[i-1].create_oval(13,13,40,40,fill='{}')""".format(items66[num])]
        elif num >= 9 and num < 12:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='{}',outline='{}',width=2)""".format(items66[num][0],items66[num][1])]
        elif num == 12:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='black',outline='orange', width=2)""","""re2[i-1].create_oval(15,15,37,37,tags='square',fill='orange')"""]
        elif num == 13:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='lightblue',outline='blue', width=2)""","""re2[i-1].create_rectangle(19,19,34,34,tags='square',fill='lightblue',outline='blue',width=2)"""]
        elif num == 14:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='black',outline='green', width=2)""","""re2[i-1].create_oval(12,12,40,40,tags='square',fill='black',outline='green',width=2)"""]
    def equ(num):
        global money, temp, temp2
        data1["eq"] = num
        temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
        temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
        temp2[0] = "#" + str(data1) + "\n"
        temp2[1] = "#" + str(money) + "\n"
        for i in temp2:
            temp.write(i)
            temp.flush()
    from tkinter import ttk
    f = Canvas(nwe, bg="#252525", bd=0, highlightthickness=0, relief='ridge')
    f22 = Frame(f, bg="#252525")
    f2 = []
    f2.append(Frame(f22, bg="#252525"))
    f2[len(f2)-1].pack(pady=20)
    re = []
    re2 = []
    sb=ttk.Scrollbar(f,orient="vertical",command=f.yview)
    f22.bind(
        "<Configure>",
        lambda e: f.configure(
            scrollregion=f.bbox("all")
        )
    )
    f.create_window((0,0),window=f22,anchor="nw")
    f.configure(yscrollcommand=sb.set)
    f.pack(side=LEFT,fill="both", expand=True)
    sb.pack(side=RIGHT,fill="y")

    re.append(None)
    re2.append(None)
    if len(f2[len(f2)-1].winfo_children()) == 4:
        f2.append(Frame(f22, bg="#252525"))
        f2[len(f2)-1].pack(pady=10)
    ie = Frame(f2[len(f2)-1], bg='#252525')
    ie.pack(side=LEFT,padx=20)
    ie2 = Canvas(ie,bg='black',width=50,height=50)
    ie2.pack(side=TOP)
    
    ie2.create_rectangle(13,13,40,40,fill="green")
    Button(ie,text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(0)).pack(pady=5)

    for i in range(len(data1["items"])):
        i += 1
        re.append(None)
        re2.append(None)
        if len(f2[len(f2)-1].winfo_children()) == 4:
            f2.append(Frame(f22, bg="#252525"))
            f2[len(f2)-1].pack(pady=10)
        if data1["items"][i-1] == 1:
            re[i-1] = Frame(f2[len(f2)-1], bg='#252525')
            re[i-1].pack(side=LEFT,padx=20)
            re2[i-1] = Canvas(re[i-1],bg='black',width=50,height=50)
            re2[i-1].pack(side=TOP)
            if len(checkish1(i)) == 2:
                eval(checkish1(i)[0])
                eval(checkish1(i)[1])
            else:
                eval(checkish1(i)[0])
            if i == 1:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(1)).pack(pady=5)
            elif i == 2:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(2)).pack(pady=5)
            elif i == 3:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(3)).pack(pady=5)
            elif i == 4:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(4)).pack(pady=5)
            elif i == 5:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(5)).pack(pady=5)
            elif i == 6:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(6)).pack(pady=5)
            elif i == 7:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(7)).pack(pady=5)
            elif i == 8:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(8)).pack(pady=5)
            elif i == 9:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(9)).pack(pady=5)
            elif i == 10:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(10)).pack(pady=5)
            elif i == 11:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(11)).pack(pady=5)
            elif i == 12:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(12)).pack(pady=5)
            elif i == 13:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(13)).pack(pady=5)
            elif i == 14:
                Button(re[i-1],text="equip",bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(14)).pack(pady=5)
            
    nwe.after(10,top)

la = BooleanVar()
la.set(True)

def settings2():
    global diff, tos, la
    nwe2 = Toplevel()
    nwe2.overrideredirect(True)
    nwe2.config(bg="#252525")
    f22 = Frame(nwe2,bg="#252525")
    f22.pack(side=TOP,pady=15)
    f = Frame(nwe2,bg="#252525",cursor="dot")
    f.place(rely=0.8,relx=0.24)
    Label(f22,text="laser assist",fg="green",bg="#252525",font=("Lucida Console","10")).pack(side=LEFT)
    e222 = Checkbutton(f22,variable=la,bg="#252525",fg="green",cursor="dot")
    e222.pack()
    Button(f,text="close",fg="green",bg="#252525",font=("Lucida Console","20"),command=nwe2.destroy).pack(side=LEFT,padx=25)
    f11 = Label(nwe2,text="difficulty: easy",fg="green",bg="#252525",font=("Lucida Console","10"))
    f11.pack()
    s = Scale(nwe2,from_=1,to=5,bg="#252525",bd=0,orient=HORIZONTAL,showvalue=0)
    s.set(diff)
    Button(f,text="tos",fg="green",bg="#252525",font=("Lucida Console","10"),command=lambda: [tos(),nwe2.destroy()]).pack(side=RIGHT)
    s.pack()
 
    def top():
        global diff
        nwe2.attributes("-topmost",True)
        nwe2.geometry("300x300+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-150),str(int(root.winfo_y()+root.winfo_height()/2)-150)))
        nwe2.after(10,top)
        numbers = {
            "1":"easy",
            "2":"medium",
            "3":"hard",
            "4":"demon",
            "5":"oh god why",
        }
        diff = str(s.get())
        f11.config(text="difficulty: "+numbers[str(s.get())])
    nwe2.after(10,top)

def shop():
    global data1, money, redeem
    temp = None
    temp2 = None
    import time
    def open2():
        nwe.destroy()
        for i in range(25):
            time.sleep(0.05)
            root.attributes("-alpha",i*5/100)
    for i in range(25, 0, -1):
        time.sleep(0.05)
        root.attributes("-alpha",i*5/100)
    nwe = Toplevel()
 
    vars1 = [StringVar(),StringVar(),StringVar(),StringVar()]
    vars2 = [IntVar(),IntVar(),IntVar(),IntVar()]

    def redeem():
        nwe.withdraw()
        root.withdraw()
        if simpledialog.askstring("Redeem Code", "redeem a code here") == "MEGAUPDATE":
            messagebox.showinfo(title="success!",message="code redeemed")
            data1["items"][13] = 1
            temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
            temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
            temp2[0] = "#" + str(data1) + "\n"
            temp2[1] = "#" + str(money) + "\n"
            for i in temp2:
                temp.write(i)
                temp.flush()
        else:
            messagebox.showinfo(title="Error!",message="not a valid code")
        nwe.deiconify()
        root.deiconify()

    nwe.overrideredirect(True)
    nwe.config(bg="#1D1D1D")
    Label(nwe,text="""
██████╗░██╗░░░░░░█████╗░░█████╗░██╗░░██╗  ███╗░░░███╗░█████╗░██████╗░██╗░░██╗███████╗████████╗
██╔══██╗██║░░░░░██╔══██╗██╔══██╗██║░██╔╝  ████╗░████║██╔══██╗██╔══██╗██║░██╔╝██╔════╝╚══██╔══╝
██████╦╝██║░░░░░███████║██║░░╚═╝█████═╝░  ██╔████╔██║███████║██████╔╝█████═╝░█████╗░░░░░██║░░░
██╔══██╗██║░░░░░██╔══██║██║░░██╗██╔═██╗░  ██║╚██╔╝██║██╔══██║██╔══██╗██╔═██╗░██╔══╝░░░░░██║░░░
██████╦╝███████╗██║░░██║╚█████╔╝██║░╚██╗  ██║░╚═╝░██║██║░░██║██║░░██║██║░╚██╗███████╗░░░██║░░░
╚═════╝░╚══════╝╚═╝░░╚═╝░╚════╝░╚═╝░░╚═╝  ╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝░░░╚═╝░░░""",fg="green",bg="#1D1D1D",font=("Lucida Console","10")).pack()
    e22 = Label(nwe,text="money: "+str(money),fg="yellow",bg="#1D1D1D",font=("Lucida Console","15"))
    e22.pack(pady=10)
    f = Frame(nwe, bg="#1D1D1D")
    f.pack(pady=20)
 
    def top():
        nwe.attributes("-topmost",True)
        nwe.geometry("800x500+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-400),str(int(root.winfo_y()+root.winfo_height()/2)-250)))
        nwe.after(10,top)
    cost = [200,200,200,200,800,800,800,800,1200,1200,1200,2000]
    def buy(num):
        
        global money, temp, temp2 
        if money >= cost[num-1]:
            money -= cost[num-1]
            data1["items"][num-1] = 1
            temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
            temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
            temp2[0] = "#" + str(data1) + "\n"
            temp2[1] = "#" + str(money) + "\n"
            for i in temp2:
                temp.write(i)
                temp.flush()
            nwe.destroy()
            shop()
        else:
            nwe.withdraw()
            root.withdraw()
            messagebox.showinfo(title="error!",message="not enough money!")
            nwe.deiconify()
            root.deiconify()
    def equ(num):
        global money, temp, temp2
        
        data1["eq"] = num
        temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
        temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
        temp2[0] = "#" + str(data1) + "\n"
        temp2[1] = "#" + str(money) + "\n"
        for i in temp2:
            temp.write(i)
            temp.flush()
        nwe.destroy()
        shop()
   
    def checkish1(num):
        items66 = {
            1: "lightgreen",
            2: "lightblue",
            3: "pink",
            4: "orange",
            5: "green",
            6: "gray",
            7: "white",
            8: "orange",
            9: ["green", "white"],
            10: ["black", "red"],
            11: ["blue", "yellow"],
            12: ["black","orange"]
        }
        if num >= 1 and num < 5:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='{}')""".format(items66[num])]
        elif num >= 5 and num < 9:
            return ["""re2[i-1].create_oval(13,13,40,40,fill='{}')""".format(items66[num])]
        elif num >= 9 and num < 12:
            return ["""re2[i-1].create_rectangle(13,13,40,40,fill='{}',outline='{}',width=2)""".format(items66[num][0],items66[num][1])]
        elif num == 12:
            return ["""re2[i-1].create_rectangle(13,13,40,40,tags='square',fill='black',outline='orange', width=2)""","""re2[i-1].create_oval(15,15,37,37,tags='square',fill='orange')"""]
    re = []
    re2 = []

    for i in range(len(ish)):
        i += 1
        x = ish[i-1]
        re.append(None)
        re2.append(None)
        count = 0
        re[i-1] = Frame(f, bg='#1D1D1D')
        re[i-1].pack(side=LEFT,padx=20)
        re2[i-1] = Canvas(re[i-1],bg='black',width=50,height=50)
        re2[i-1].pack(side=TOP)
        if len(checkish1(ish[i-1])) == 2:
            eval(checkish1(ish[i-1])[0])
            eval(checkish1(ish[i-1])[1])
        else:
            eval(checkish1(ish[i-1])[0])
        
        if data1["items"][ish[i-1]-1] == 0:
            vars1[i-1].set("buy")
            vars2[i-1].set(cost[ish[i-1]-1])
            if i == 1:
                Button(re[i-1], textvariable=vars1[i-1],bg="#252525",fg="green",font=("Terminal","15"),command=lambda: [buy(ish[0])]).pack(side=BOTTOM)
            elif i == 2:
                Button(re[i-1], textvariable=vars1[i-1],bg="#252525",fg="green",font=("Terminal","15"),command=lambda: [buy(ish[1])]).pack(side=BOTTOM)
            elif i == 3:
                Button(re[i-1], textvariable=vars1[i-1],bg="#252525",fg="green",font=("Terminal","15"),command=lambda: [buy(ish[2])]).pack(side=BOTTOM)
            elif i == 4:
                Button(re[i-1], textvariable=vars1[i-1],bg="#252525",fg="green",font=("Terminal","15"),command=lambda: [buy(ish[3])]).pack(side=BOTTOM)
            Label(re[i-1],textvariable=vars2[i-1],fg="yellow",bg="#1D1D1D",font=("Lucida Console","10")).pack()
        else:
            vars1[i-1].set("equip")
            vars2[i-1].set(cost[ish[i-1]-1])
            Label(re[i-1],textvariable=vars2[i-1],fg='#1D1D1D',bg='#1D1D1D',font=('Terminal','10')).pack()
            if i == 1:
                Button(re[i-1], textvariable=vars1[i-1],bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(ish[0])).pack(side=BOTTOM)
            if i == 2:
                Button(re[i-1], textvariable=vars1[i-1],bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(ish[1])).pack(side=BOTTOM)
            if i == 3:
                Button(re[i-1], textvariable=vars1[i-1],bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(ish[2])).pack(side=BOTTOM)
            if i == 4:
                Button(re[i-1], textvariable=vars1[i-1],bg='#252525',fg='light green',font=('Lucida Console','15'),command=lambda: equ(ish[3])).pack(side=BOTTOM)

    f33 = Frame(nwe,bg="#1D1D1D")
    f33.pack()

    def appla():
        global money, temp, temp2 
        apples = int(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[5][1:]) + 1
        if money >= 500 and not apples == 9:
            money -= 500
            temp2 = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()
            temp = open(os.path.dirname(os.path.realpath(__file__))+"\.data", "w")
            temp2[5] = "#" + str(apples) + "\n"
            for i in temp2:
                temp.write(i)
                temp.flush()
            nwe.destroy()
            shop()
        else:
            nwe.withdraw()
            root.withdraw()
            messagebox.showinfo(title="error!",message="not enough money or\nmax apple limit reached")
            nwe.deiconify()
            root.deiconify()

    ga = Frame(f33,bg="#1D1D1D")
    ga.pack()

    ga1 = Canvas(ga,bg='black',width=50,height=50)

    ga1.create_oval(13,13,40,40,fill='red',outline='darkred', width=2)

    ga1.pack(side=TOP)
    ga2 = Label(ga,text="500\n({}/8)".format(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[5][1:2]),fg="yellow",bg="#1D1D1D",font=("Lucida Console","10"))
    ga2.pack()
    ga3 = Button(ga,text="buy",bg="#252525",fg="green",font=("Terminal","15"),command = lambda: appla())
    ga3.pack()

    f44 = Frame(nwe,bg="#1D1D1D")
    f44.pack(side=BOTTOM)
    Button(f44,text="close",fg="green",bg="#252525",font=("Terminal","25"),command=lambda: [open2()]).pack(side=LEFT,padx=30)
    Button(f44,text="redeem code",fg="green",bg="#252525",font=("Terminal","25"),command=lambda: redeem()).pack(side=RIGHT,padx=30)
    nwe.after(10,top)
 
score = StringVar()
score.set("Snek")
die = 0
die2 = 0

inc = False
 
totalscore = [1, 1]
 
pass2 = StringVar()
 
ton = False
 
players = 1
 
newslbl = None
slbl2 = None

def start():
    global passed, snake, gridsize, speed, cla, score, inc, invin, pass2, players, ton, newslbl, slbl2
 
    newslbl = Button(text="NEWS",font=("Lucida Console","30"),fg="green",bg="#171717",relief=FLAT,command=news2)
    newslbl.pack(side=LEFT)
 
    slbl2 = Button(text="⚙",font=("Lucida Console","20"),fg="green",bg="#171717",relief=FLAT,command=settings2)
    slbl2.pack(side=RIGHT)
 
    pass2 = StringVar()
    pass2.set("no")
    passed = StringVar()
    logo = Label(window,text="""█▀ █▄ █ ▄▀█ █▄▀ █▀▀
▄█ █ ▀█ █▀█ █ █ ██▄""",font=("Lucida Console","30"),fg="green",bg="#1D1D1D")
    logo.pack(pady=50)
    button = Button(window,text="START GAME",
                    font=("Terminal","30"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=3,
                    command=lambda: passed.set("pass"),
                    fg="#ffffff",
                    borderwidth=4,
                    highlightcolor="#ffffff",
                    )
    button.pack()
    f77 = Frame(window,bg="#1D1D1D")
    f77.pack()
    button1 = Button(f77,text="ITEMS",
                    font=("Terminal","30"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=3,
                    command=lambda: item(),
                    fg="#ffffff",
                    borderwidth=4,
                    highlightcolor="#ffffff",
                    )
    button1.pack(side=LEFT)
    button1a = Button(f77,text="EVENTS",
                    font=("Terminal","30"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=3,
                    command=lambda: messagebox.showinfo(title="Inc0m1ng m355ag3",message="see you in 1.2..."),
                    fg="#ffffff",
                    borderwidth=4,
                    highlightcolor="#ffffff",
                    )
    button1a.pack(side=RIGHT)
    button2 = Button(window,text="BLACK MARKET",
                    height=1,
                    font=("Terminal","30"),
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=3,
                    command=lambda: shop(),
                    fg="#ffffff",
                    borderwidth=4,
                    highlightcolor="#ffffff",
                    )
    button2.pack()
    logo.wait_variable(passed)
    f77.destroy()
    button1.destroy()
    button1a.destroy()
    button2.destroy()
    button.destroy()

    HL = Label(window,text="highscore: {}".format(highscore),
                    font=("Lucida Console","20"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=0,
                    fg="#ffffff",
                    borderwidth=0,
                    highlightcolor="#ffffff",)
    HL.pack()

    button1 = Button(window,text="PLAY",
                    font=("Terminal","30"),
                    height=1,
                    relief=FLAT,
                    highlightbackground="#ffffff",
                    bg="#1D1D1D",
                    highlightthickness=3,
                    command=lambda: [pass2.set("yes"),passed.set("yes")],
                    fg="#ffffff",
                    borderwidth=4,
                    highlightcolor="#ffffff",
                    )
    button1.pack(side=BOTTOM)

    logo.wait_variable(passed)

    HL.destroy()
    button1.destroy()
    button2.destroy()
    button.destroy()
    
    if pass2.get() == "no":
 
        note = Label(window, text="coins cannot be earned in custom mode",bg="#1D1D1D",fg="white",font=("Comic Sans MS","8"))
        f1 = Frame(window,bg="#1D1D1D")
        f1.pack()
        button1l = Label(f1,text="gridsize:",bg="#1D1D1D",fg="#ffffff",font=("Lucida Console","15"))
        button1l.pack(side=LEFT)
        button1e = Entry(f1,width=10,font=("Comic Sans MS","15"))
        button1e.pack(side=RIGHT)
       
        f2 = Frame(window,bg="#1D1D1D")
        f2.pack(pady=20)
        button2l = Label(f2,text="speed:",bg="#1D1D1D",fg="#ffffff",font=("Lucida Console","15"))
        button2l.pack(side=LEFT)
        button2e = Entry(f2,width=10,font=("Comic Sans MS","15"))
        button2e.pack(side=RIGHT)
 
        var2 = IntVar()
        c = Checkbutton(window, bg="#1D1D1D",fg="white",font=("Comic Sans MS","8"), text='2 Player',selectcolor="green",variable=var2, onvalue=1, offvalue=0)
        c.pack()
        c.deselect()

        
        ready = Button(window,text="start",
                        height=1,
                        font=("Lucida Console","20"),
                        relief=FLAT,
                        highlightbackground="#ffffff",
                        bg="#1D1D1D",
                        highlightthickness=3,
                        command=lambda: passed.set("ready"),
                        fg="#ffffff",
                        borderwidth=4,
                        highlightcolor="#ffffff",
                        )
        ready.pack()
        note.pack()
 
        passed = StringVar()
        logo.wait_variable(passed)
 
        if var2.get() == 1:
            players = 2
        else:
            players = 1
 
        try:
            speed = float(button2e.get())
        except:
            messagebox.showerror(title="Error!",message="couldn't set speed to {}, that isn't a valid number! restarting script...".format(button2e.get()))
            os.execl(python, python, *sys.argv)
        window.config(bg="#1D1D1D")
 
        if 1 == 2:
            pass
        else:
            try:
                gridsize = int(button1e.get())
            except:
                messagebox.showerror(title="Error!",message="couldn't set gird size to {}, that isn't a valid number! restarting script...".format(button1e.get()))
                os.execl(python, python, *sys.argv)
 
        c.destroy()
        f1.destroy()
        button1l.destroy()
        button1e.destroy()
 
        f2.destroy()
        button2l.destroy()
        button2e.destroy()
 
        ready.destroy()
    else:
        speed = 1
        gridsize = 40
        inc = True
    logo.destroy()
 
start()
 
g = int(500/gridsize)
 
speed = int(float(speed) *100)
 
dead = 0
dead2 = 0
 
die = 1
die2 = 1
 
def findsquare(coords):
    return coords[0]-25,coords[1]+25

luckyc = ()
luckyr = None
luckyt = None

bombcc = []

def poison():
    global speed
    import time
    game.config(bg="red")
    time.sleep(0.2)
    game.config(bg="black")
    speed += 20


def startbm():
    import time
    if diff == "2":
        threading.Thread(target=lambda: bomb(1)).start()
    if diff == "3":
        threading.Thread(target=lambda: bomb(2)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(2)).start()
    elif diff == "4":
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
    elif diff == "5":
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)
        threading.Thread(target=lambda: bomb(3)).start()
        time.sleep(0.5)


def bomb(num):
    global bombcc, la, paused
    import time, threading
    bombc = ()
    bombr = None
    run = True
    while paused:
        pass
        time.sleep(0.2)
    while run == True:
        body = tuple(zip(x,y))
        bombc = (random.randint(0,gridsize-1),random.randint(0,gridsize-1),False)
        bombcc.append(bombc)
        if not bombc in body:
            run = False
    bombr = game.create_rectangle(bombc[0]*g,bombc[1]*g,bombc[0]*g+g,bombc[1]*g+g,tags="bomb",fill="#960000")
    game.update()
    while paused:
        pass
        time.sleep(0.2)
    if la.get():
        line1t = game.create_line(bombc[0]*g+6,6,bombc[0]*g+6,506,fill="#270400", width=5)
        line2t = game.create_line(6,bombc[1]*g+6,506,bombc[1]*g+6,fill="#270400", width=5)
        game.tag_lower(line1t)
        game.tag_lower(line2t)
    while paused:
        pass
        time.sleep(0.2)
    time.sleep(2)
    while paused:
        pass
        time.sleep(0.2)
    line1 = game.create_line(bombc[0]*g+6,6,bombc[0]*g+6,506,fill="red", width=5,tags="bomb")
    line2 = game.create_line(6,bombc[1]*g+6,506,bombc[1]*g+6,fill="red", width=5)
    game.tag_lower(line1)
    game.tag_lower(line2)
    if la.get():
        game.tag_lower(line1t)
        game.tag_lower(line2t)
    oldbombc = bombc
    bombc2 = list(bombc)
    bombc2[2] = True
    bombc = tuple(bombc2)
    for i in range(len(bombcc)):
        if bombcc[i] == oldbombc:
            bombcc[i] = bombc
    game.update()
    while paused:
        pass
        time.sleep(0.2)
    if num == 1:
        time.sleep(1)
    elif num == 2:
        time.sleep(random.randint(1,3))
    elif num == 3:
        time.sleep(random.randint(2,5))
    else:
        time.sleep(random.randint(1,10))
    while paused:
        pass
        time.sleep(0.2)
    game.delete(bombr)
    game.delete(line1)
    game.delete(line2)
    if la.get():
        game.delete(line1t)
        game.delete(line2t)
    
    bombcc.remove(bombc)
    game.update()
    time.sleep(random.randint(1,3))
    threading.Thread(target=lambda: bomb(num)).start()

def printsnek(x11,x22,x33,x44):
    if data1["eq"] == 0:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="green")
    elif data1["eq"] == 1:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="light green")
    elif data1["eq"] == 2:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="light blue")
    elif data1["eq"] == 3:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="pink")
    if data1["eq"] == 4:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="orange")
    elif data1["eq"] == 5:
        game.create_oval(x11,x22,x33,x44,tags="square",fill="green")
    elif data1["eq"] == 6:
        game.create_oval(x11,x22,x33,x44,tags="square",fill="gray")
    elif data1["eq"] == 7:
        game.create_oval(x11,x22,x33,x44,tags="square",fill="white")
    elif data1["eq"] == 8:
        game.create_oval(x11,x22,x33,x44,tags="square",fill="orange")
    elif data1["eq"] == 9:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="green",outline='white', width=2)
    elif data1["eq"] == 10:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="black",outline='red', width=2)
    elif data1["eq"] == 11:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="blue",outline='yellow', width=2)
    elif data1["eq"] == 12:
        game.create_rectangle(x11,x22,x33,x44,tags="square",fill="black",outline='orange', width=2)
        game.create_oval(x11+2,x22+2,x33-3,x44-3,tags="square",fill="orange")
    elif data1["eq"] == 13:
        game.create_rectangle(x11,x22,x33,x44,tags='square',fill='lightblue',outline='blue', width=2)
        game.create_rectangle(x11+4,x22+4,x33+-4,x44+-4,tags='square',fill='lightblue',outline='blue',width=2)
    elif data1["eq"] == 14:
        game.create_rectangle(x11,x22,x33,x44,tags='square',fill='black',outline='green', width=2)
        game.create_oval(x11-1,x22-1,x33,x44,tags='square',fill='black',outline='green',width=2)
    
def exp():
    pass

def luckyapple(starting):
    global luckyc, luckyr, luckyt
    if starting:
        luckyc = ()
        game.delete(luckyr)
        game.delete(luckyt)
    run = True
    if random.randint(0,200) == 11:
        luckyc = ()
        game.delete(luckyr)
        game.delete(luckyt)
        while run == True:
            body = tuple(zip(x,y))
            luckyc = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
            if not luckyc in body:
                run = False
        luckyr = game.create_rectangle(luckyc[0]*g,luckyc[1]*g,luckyc[0]*g+g,luckyc[1]*g+g,tags="lucky",fill="purple")
        luckyt = game.create_text(luckyc[0]*g+6,luckyc[1]*g+6,text="?",tags="lucky",fill="white")

def placeapple(five=False):
    global gridsize, speed, inc, applebody, appleid, applet, appf    
    run = True
    if five:
        tryit = 3
    else:
        tryit = 1
    for i in range(tryit):
        if random.randint(0,50) == "a":
            while run == True:
                coords = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
                body = tuple(zip(x,y))
                if not coords in body or 0 in coords or 40 in coords:
                    run = False
            appf = "blue"
            applet.append("b")
            continueit = True
            while continueit:
                ran = str(random.randint(0,100000))
                if not ran in appleid:
                    app = len(appleid)
                    appleid.append(ran)
                    continueit = False
        elif random.randint(0,5) == 5:
            while run == True:
                coords = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
                body = tuple(zip(x,y))
                if not coords in body:
                    run = False
            appf = "yellow"
            applet.append("y")
            continueit = True
            while continueit:
                ran = str(random.randint(0,100000))
                if not ran in appleid:
                    app = len(appleid)
                    appleid.append(ran)
                    continueit = False
        else:
            while run == True:
                coords = (random.randint(0,gridsize-1),random.randint(0,gridsize-1))
                body = tuple(zip(x,y))
                if not coords in body:
                    run = False
            appf = "red"
            applet.append("r")
            continueit = True
            while continueit:
                ran = str(random.randint(0,100000))
                if not ran in appleid:
                    app = len(appleid)
                    appleid.append(ran)
                    continueit = False
        apple.append(coords)
        coords = list(coords)
        applebody.append(game.create_oval(coords[0]*g,coords[1]*g,coords[0]*g+g,coords[1]*g+g,tags="{}".format(appleid[app]),fill=appf))

totalcoins = 0

def move():
    luckyapple(False)
    global paused, x, y, speed, totalcoins, direction, die, score, gridsize, cla, g, dead, players, invin, dead2, player1dead, totalscore, appleid, applebody, applet, appf
    if die != 0:
        die -= 1
    if direction == "u":
        x.insert(0,x[0])
        y.insert(0,y[0]-1)
    elif direction == "d":
        x.insert(0,x[0])
        y.insert(0,y[0]+1)
    elif direction == "l":
        x.insert(0,x[0]-1)
        y.insert(0,y[0])
    elif direction == "r":
        x.insert(0,x[0]+1)
        y.insert(0,y[0])
    tx = x
    ty = y
    for i in range(len(x),1):
        x[i-1] = tx[i-2]
        y[i-1] = ty[i-2]
    x.pop()
    y.pop()
    game.delete("square")

    for i in range(len(applebody)):
        if apple[i-1] in list(zip(x,y)):
            if random.randint(1,10) != 2 or len(x) < 8:
                if inc:
                    if diff == "5":
                        speed -= 10
                    elif diff == "4":
                        speed -= 5
                    elif not diff == "1":
                        speed -= 2
                game.delete(appleid[i-1])
                game.delete(applebody[i-1])
                applebody.pop(i-1)
                apple.pop(i-1)
                appleid.pop(i-1)
                value = applet.pop(i-1)
                die += 1
                scorep = 1
                if value == "r":
                    x.append(x[len(x)-1])
                    y.append(y[len(y)-1])
                    totalcoins += 2
                elif value == "y":
                    for i in range(5):
                        x.append(x[len(x)-1])
                        y.append(y[len(y)-1])
                    totalcoins += 10
                    die += 5
                    scorep = 5
                elif value == "b":
                    for i in range(20):
                        x.append(x[len(x)-1])
                        y.append(y[len(y)-1])
                    totalcoins += 40
                    die += 20
                    scorep = 20
            else:
                game.delete(appleid[i-1])
                game.delete(applebody[i-1])
                applebody.pop(i-1)
                apple.pop(i-1)
                appleid.pop(i-1)
                value = applet.pop(i-1)
                if len(x) > 10:
                    for i in range(5):
                        x.pop()
                        y.pop()
                        totalscore[0] -= 1
                else:
                    for i in range(3):
                        x.pop()
                        y.pop()
                        totalscore[0] -= 1
                threading.Thread(target=poison).start()
            placeapple()
    if luckyc in list(zip(x,y)):
        luckyapple(True)
        if diff == 1:
            e = random.randint(1,3)
            if e == 1:
                game.delete("square")
                if not diff == "1":
                    coinee()
                if totalscore[0] > highscore:
                    writehs()
                messagebox.showinfo(title="you died!",message="The lucky apple chose death upon you!\nyou were out of luck")
                os.execl(python, python, *sys.argv)
            else:
                for i in range(totalscore[0]):
                    x.append(x[len(x)-1])
                    y.append(y[len(y)-1])
                totalcoins += 20
                die += totalscore[0]
                scorep = totalscore[0]
        else:
            e = random.randint(1,3)
            if e == 1:
                game.delete("square")
                if not diff == "1":
                    coinee()
                if totalscore[0] > highscore:
                    writehs()
                messagebox.showinfo(title="you died!",message="The lucky apple chose death upon you!\nyou were out of luck")
                os.execl(python, python, *sys.argv)
            else:
                for i in range(totalscore[0]):
                    x.append(x[len(x)-1])
                    y.append(y[len(y)-1])
                totalcoins += 20
                die += totalscore[0]
                scorep = totalscore[0]
                
    try:
        totalscore[0] += scorep
    except:
        pass
   
    if invin:
        die = 100000
 
    player1dead.config(text=" {}".format(totalscore[0]))

    coinss.config(text=" {}".format(totalcoins))

    for i in range(len(x)):
        i += 1
        printsnek(x[i-1]*g,y[i-1]*g,x[i-1]*g+g,y[i-1]*g+g)
    for i in bombcc:
        if i[2] == True:
            count = 0
            for z in range(40):
                count += 1
                ee = (i[0],count)
                body = list(zip(x,y))
                if ee in body:
                    if not diff == "1":
                        coinee()
                    if totalscore[0] > highscore:
                        writehs()
                    messagebox.showinfo(title="you died!",message="you were burned by a laser!")
                    os.execl(python, python, *sys.argv)
            count = 0
            for z in range(40):
                count += 1
                ee = (count,i[1])
                body = list(zip(x,y))
                if ee in body:
                    if not diff == "1":
                        coinee()
                    if totalscore[0] > highscore:
                        writehs()
                    messagebox.showinfo(title="you died!",message="you were burned by a laser!")
                    os.execl(python, python, *sys.argv)
               
    if -1 in x or -1 in y or gridsize in x or gridsize in y:
        if players == 1 or (dead == 1 and dead2 == 1):
            quote()
            if not diff == "1":
                    coinee()
            if totalscore[0] > highscore:
                    writehs()
            if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                os.execl(python, python, *sys.argv)
        else:
            game.delete("square")
            player1dead.config(fg="red")
            dead = 1
            if dead == 1 and dead2 == 1:
                quote()
                if not diff == "1":
                    coinee()
                if totalscore[0] > highscore:
                    writehs()
                if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                    os.execl(python, python, *sys.argv)
    elif not paused:
        window.after(speed,move)
 
def move2():
    global x2, y2, direction2, die2, score, gridsize, cla, g, players, dead2, dead, player2dead, invin, totalscore, appleid, applebody, applet, appf
    if die2 != 0:
        die2 -= 1
    if  direction2 == "u":
        x2.insert(0,x2[0])
        y2.insert(0,y2[0]-1)
    elif direction2 == "d":
        x2.insert(0,x2[0])
        y2.insert(0,y2[0]+1)
    elif direction2 == "l":
        x2.insert(0,x2[0]-1)
        y2.insert(0,y2[0])
    elif direction2 == "r":
        x2.insert(0,x2[0]+1)
        y2.insert(0,y2[0])
    tx2 = x2
    ty2 = y2
    for i in range(len(x2),1):
        x2[i-1] = tx2[i-2]
        y2[i-1] = ty2[i-2]
    x2.pop()
    y2.pop()
    game.delete("square2")
    for i in range(len(x2)):
        i += 1
        game.create_rectangle(x2[i-1]*g,y2[i-1]*g,x2[i-1]*g+g,y2[i-1]*g+g,tags="square2",fill="lightblue")
    for i in range(len(applebody)):
        if apple[i-1] in list(zip(x2,y2)):
            game.delete(appleid[i-1])
            game.delete(applebody[i-1])
            applebody.pop(i-1)
            apple.pop(i-1)
            appleid.pop(i-1)
            value = applet.pop(i-1)
            die2 += 1
            placeapple()
            scorep2 = 1
            if value == "r":
                x2.append(x2[len(x2)-1])
                y2.append(y2[len(y2)-1])
            elif value == "y":
                for i in range(5):
                    x2.append(x2[len(x2)-1])
                    y2.append(y2[len(y2)-1])
                die2 += 5
                scorep2 = 5
            elif value == "b":
                for i in range(20):
                    x.append(x[len(x)-1])
                    y.append(y[len(y)-1])
                die2 += 20
                scorep2 = 20
    try:
        totalscore[1] += scorep2
    except:
        pass
   
    if invin:
        die2 = 100000
 
    player2dead.config(text="player 2: {}".format(totalscore[1]))
               
    if len(list(zip(x2,y2))) != len(set(zip(x2,y2))) and die2 == 0:
        if dead == 1 and dead2 == 1:
            quote()
            if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                os.execl(python, python, *sys.argv)
        else:
            game.delete("square2")
            player2dead.config(fg="red")
            dead2 = 1
            if dead == 1 and dead2 == 1:
                quote()
                if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                    os.execl(python, python, *sys.argv)
    elif -1 in x2 or -1 in y2 or gridsize in x2 or gridsize in y2:
        if dead == 1 and dead2 == 1:
            quote()
            if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                os.execl(python, python, *sys.argv)
        else:
            game.delete("square2")
            player2dead.config(fg="red")
            dead2 = 1
            if dead == 1 and dead2 == 1:
                quote()
                if messagebox.askyesno(title="you died!",message="game over! do you want to retry?"):
                    os.execl(python, python, *sys.argv)
    else:
        window.after(speed,move2)
 
direction = "u"
direction2 = "u"
 
applet = []
apple = []
applebody = []
appleid = []
 
x = [int(round(gridsize/2))]
y = [int(round(gridsize/2))]
 
x2 = [int(round(gridsize/2))]
y2 = [int(round(gridsize/2))]
 
def up(event):
    global x, y, direction
    direction = "u"
 
def down(event):
    global x, y, direction
    direction = "d"
 
def left(event):
    global x, y, direction
    direction = "l"
 
def right(event):
    global x, y, direction
    direction = "r"
 
def up2(event):
    global x, y, direction2
    direction2 = "u"
 
def down2(event):
    global x, y, direction2
    direction2 = "d"
 
def left2(event):
    global x, y, direction2
    direction2 = "l"
 
def right2(event):
    global x, y, direction2
    direction2 = "r"
 
root.bind("<Up>", up)
root.bind("<Down>", down)
root.bind("<Left>", left)
root.bind("<Right>", right)
 
root.bind("<w>", up2)
root.bind("<s>", down2)
root.bind("<a>", left2)
root.bind("<d>", right2)

newslbl.destroy()
slbl2.destroy()

root.geometry("800x500")
window.config(bg="#1D1D1D")
game = Canvas(window,bg="#000000",width=500,height=500,cursor="none")
game.pack(side=LEFT)
 
for i in range(len(x)):
    i += 1
    printsnek(x[i-1]*g,y[i-1]*g,x[i-1]*g+g,y[i-1]*g+g)
    if players == 2:
        printsnek(x[i-1]*g,y[i-1]*g,x[i-1]*g+g,y[i-1]*g+g)
 
if pass2.get() == "true":
    placeapple(five=True)
else:
    if ton:
        for i in range(12000):
            placeapple()
    elif players == 2:
        for i in range(3):
            placeapple()
    else:
        for i in range(int(open(os.path.dirname(os.path.realpath(__file__))+"\.data", "r").readlines()[5][1:])):
            placeapple()
       
 
deaad = Frame(window,bg="#1D1D1D")
deaad.pack(padx=5,fill=X)

deadumm = Frame(deaad,bg="#1D1D1D")
deadumm.pack(side=RIGHT,expand=True)

st = Label(deadumm,text="""
█▀ ▀█▀ ▄▀█ ▀█▀ █▀ ▀
▄█  █  █▀█  █  ▄█ ▄""",fg="green",bg="#1D1D1D",font=("Lucida Console","6"))

st.pack(pady=10)

allt = Frame(deadumm,bg="#1D1D1D")
allt.pack(pady=50)

p1d = Frame(allt, bg="#1D1D1D")
p1d.pack()

player1deada = Label(p1d,text="""
█▀ █▀▀ █▀█ █▀█ █▀▀ ▀
▄█ █▄▄ █▄█ █▀▄ ██▄ ▄""",fg="white",bg="#1D1D1D",font=("Lucida Console","6"))
player1dead = Label(p1d,text=" 1",fg="white",bg="#1D1D1D",font=("Comic Sans MS","15","bold"))
player1deada.pack(side=LEFT)
player1dead.pack(side=RIGHT)


c1d = Frame(allt, bg="#1D1D1D")
c1d.pack()

ca = Label(c1d,text="""
█▀▀ █▀█ █ █▄ █ █▀ ▀
█▄▄ █▄█ █ █ ▀█ ▄█ ▄""",fg="white",bg="#1D1D1D",font=("Lucida Console","6"))
ca.pack(side=LEFT)

coinss = Label(c1d,text="coins: 0",fg="white",bg="#1D1D1D",font=("Comic Sans MS","15","bold"))
coinss.pack(side=RIGHT)
 
window.after(speed,move)

paused = False

threading.Thread(target=startbm).start()

if players == 2:
    player2dead = Label(deadumm,text="player 2: 1",fg="white",bg="#1D1D1D",font=("Comic Sans MS","15"))
    player2dead.pack()
    window.after(speed,move2)
else:
    deaad.pack(padx=12,fill=X)

nwe66 = None

def pause():
    global paused, nwe66, speed, move
    if paused:
        nwe66.destroy()
        window.after(speed,move)
        paused = False
    else:
        paused = True
        nwe66 = Toplevel()
        nwe66.attributes("-alpha",0.5)
        nwe66.overrideredirect(True)
        nwe66.config(bg="#1D1D1D")
        Label(nwe66,text="""
    █▀█ ▄▀█ █ █ █▀ █▀▀ █▀▄
    █▀▀ █▀█ █▄█ ▄█ ██▄ █▄▀""",font=("Lucida Console","15"),fg="green",bg="#1D1D1D").place(relx=0.45,rely=0.1,anchor="center")
        def top():
            try:
                nwe66.attributes("-topmost",True)
                nwe66.geometry("500x466+{}+{}".format(str(int(root.winfo_x()+root.winfo_width()/2)-398),str(int(root.winfo_y()+root.winfo_height()/2)-220)))
                nwe66.after(1,top)
            except:
                pass
        nwe66.after(1,top)


p = Button(title_bar,text="pause",relief="flat",command=lambda: threading.Thread(target=pause).start(),bg="#171717",fg="white")
p.pack()

root.mainloop()
